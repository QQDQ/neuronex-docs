{
	"openapi": "3.1.0",
	"info": {
		"title": "NeuronEX-swagger-zh",
		"description": "",
		"version": "3.3.0"
	},
	"tags": [
    {
        "name": "NeuronEX"
    },{
		"name": "server"
	}, {
		"name": "sso"
	}, {
		"name": "license"
	}, {
		"name": "ekuiper_plugin"
	}, {
		"name": "tunnel"
	}, {
		"name": "management"
	}, {
		"name": "liveness"
	}, {
		"name": "log"
	}, {
		"name": "template"
	}, {
		"name": "process_control"
	}, {
		"name": "status"
	}, {
		"name": "sse"
	}, {
		"name": "monitor"
	}, {
        "name": "Neuron"
    }, {
		"name": "configuration"
	}, {
		"name": "metrics"
	}, {
		"name": "rw"
	}, {
        "name": "eKuiper"
    },{
		"name": "configKey"
	}, {
		"name": "configs"
	}, {
		"name": "data"
	}, {
		"name": "overview"
	}, {
		"name": "plugins"
	}, {
		"name": "rules"
	}, {
		"name": "ruleset"
	}, {
		"name": "schemas"
	}, {
		"name": "services"
	}, {
		"name": "streams"
	}, {
		"name": "tables"
	}, {
		"name": "uploads"
	}, {
		"name": "data processing metrics"
	}, {
		"name": "test rule"
	}, {
		"name": "udf"
	}],
	"paths": {
		"/api/login": {
			"post": {
				"summary": "Login",
				"deprecated": false,
				"description": "",
				"operationId": "loginHandler",
				"tags": ["server"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginBody"
							},
							"example": {
								"name": "admin",
								"password": "0000"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/responseData"
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"token": "eyJhbGciOiJ....",
											"role": "Administrator"
										}
									}
								}
							}
						},
						"headers": {}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/users/password/{name}": {
			"put": {
				"summary": "Change password",
				"deprecated": false,
				"description": "",
				"operationId": "passwordChangeHandler",
				"tags": ["server"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "name",
					"in": "query",
					"description": "username to be deleted",
					"required": true,
					"example": "test",
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PasswordChangeBody"
							},
							"example": {
								"name": "test",
								"old_password": "0000",
								"new_password": "1111"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/users": {
			"post": {
				"summary": "Creat New User",
				"deprecated": false,
				"description": "",
				"operationId": "newUserHandler",
				"tags": ["server"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NewUserRequestBody"
							},
							"example": {
								"name": "test",
								"password": "test",
								"role": "Viewer",
								"description": "create new user test and set him to viewer"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/users/role/{name}": {
			"put": {
				"summary": "Change role",
				"deprecated": false,
				"description": "",
				"operationId": "roleChangeHandler",
				"tags": ["server"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "name",
					"in": "query",
					"description": "username to be deleted",
					"required": true,
					"example": "test",
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserRoleChangeBody"
							},
							"example": {
								"name": "test",
								"role": "Viewer",
								"description": "change user test's role to viewer"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/users/{name}": {
			"delete": {
				"summary": "Delete User",
				"deprecated": false,
				"description": "",
				"operationId": "deleteUserHandler",
				"tags": ["server"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "name",
					"in": "query",
					"description": "username to be deleted",
					"required": true,
					"example": "test",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/system": {
			"get": {
				"summary": "Get system information",
				"deprecated": false,
				"description": "",
				"operationId": "querySystemInfo",
				"tags": ["server"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/QuerySystemInfoResp"
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"version": "3.1.0-beta.3",
											"systemStatus": "0",
											"neuronRunningTime": "6332",
											"neuronStatus": "0",
											"neuronMemoryUsed": "8364032",
											"neuronMemoryTotal": "4125425664",
											"ekuiperRunningTime": "6332",
											"ekuiperStatus": "0",
											"ekuiperMemoryUsed": "84316160",
											"ekuiperMemoryTotal": "4125425664",
											"submoduleStatus": {
												"alert": false,
												"monitor": false,
												"syslog": false
											},
											"hwToken": "m/djk5abRRToVTyBBCXkUVyMumgbYmo2PdwdjnVeqn8=",
											"os": "Debian GNU/Linux 11",
											"kernel": "5.10.124-linuxkit",
											"arch": "x86_64",
											"clib": "glibc-2.31"
										}
									}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/version": {
			"get": {
				"summary": "Gett NeuronEX version information",
				"deprecated": false,
				"description": "",
				"operationId": "queryVersion",
				"tags": ["server"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VersionResp"
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"version": "3.1.0-beta.3"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/webhook/syslog": {
			"get": {
				"summary": "Get NeuronEX Log Remote Forwarding Configuration",
				"deprecated": false,
				"description": "",
				"operationId": "syslogForwardConfig",
				"tags": ["server"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/syslogInfoData"
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"enabled": false,
											"network": "udp4",
											"addr": "",
											"priority": 6,
											"tag": "neuronex"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "Update NeuronEX Log Remote Forwarding Configuration",
				"deprecated": false,
				"description": "",
				"operationId": "syslogWebHook",
				"tags": ["server"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SyslogReq"
							},
							"example": {
								"enabled": true,
								"addr": "localhost:10514",
								"priority": 6,
								"tag": "neuronex"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/sso/{serverName}": {
			"put": {
				"summary": "Update an SSO configuration",
				"deprecated": false,
				"description": "",
				"operationId": "UpdateSSOConfig",
				"tags": ["sso"],
				"parameters": [{
					"name": "serverName",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateSSOConfigBody"
							},
							"example": {
								"name": "sso1",
								"url": "https://iamnew.ctwing.cn",
								"clientId": "VDx2v0usxxx",
								"clientSecret": "1uu9c5xxxx",
								"type": "oauth2",
								"enabled": true
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Get an SSO configuration",
				"deprecated": false,
				"description": "",
				"operationId": "QuerySSOConfig",
				"tags": ["sso"],
				"parameters": [{
					"name": "serverName",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SSOConfigBody"
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"name": "sso1",
											"url": "https://iamnew.ctwing.cn",
											"clientId": "VDx2v0usxxx",
											"clientSecret": "1uu9c5xxxx",
											"type": "oauth2",
											"enabled": false
										}
									}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Delete an SSO configuration",
				"deprecated": false,
				"description": "",
				"operationId": "DeleteSSOConfig",
				"tags": ["sso"],
				"parameters": [{
					"name": "serverName",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/license": {
			"get": {
				"summary": "Get License Information",
				"deprecated": false,
				"description": "",
				"operationId": "GetLicenseInfo",
				"tags": ["license"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetLicenseResponse"
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"licenseType": "TRIAL",
											"customerName": "EMQ Technologies Inc.",
											"customerContact": "support@emqx.io",
											"startDate": "2023-12-06 03:28:25",
											"expiredDate": "2123-12-06 03:28:25",
											"expired": false,
											"totalTagCount": 30,
											"usedTagCount": 0,
											"enabledPlugins": ["ABB COMLI", "Allen-Bradley ControlLogix 5500", "Allen-Bradley DF1", "Allen-Bradley MicroLogix 1400", "BACnet/IP", "Beckhoff ADS", "DLT645-1997", "DLT645-2007", "EtherNet/IP(CIP)", "GE SRTP", "HJ212-2017", "HOSTLINK CMODE", "IEC60870-5-104", "IEC61850", "Inovance Modbus TCP", "KNXnet/IP", "KUKA ETHERNET KRL TCP", "Mitsubishi 1E", "Mitsubishi 3E", "Mitsubishi FX", "Modbus RTU", "Modbus TCP", "Modbus TCP QH", "NON A11", "OPC UA", "Omron FINS TCP", "Omron FINS UDP", "Panasonic Mewtocol", "Profinet IO", "SECS GEM HSMS", "Siemens FetchWrite", "Siemens RK512", "Siemens S7 ISOTCP", "Siemens S7 ISOTCP for 300/400", "SparkPlugB", "WebSocket"],
											"hardwareToken": "FdVCScD63F5gGcB0eO5OuwQsxg5jJoa+YOxyOub9c5g=",
											"ekuiperOn": true,
											"officialEmail": "support@emqx.io"
										}
									}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "Upload License",
				"deprecated": false,
				"description": "",
				"operationId": "UploadLicense",
				"tags": ["license"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UploadLicenseReqData"
							},
							"example": {
								"license": "CAIaFUVNUSBUZWNobm9s..."
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UploadLicenseResponse"
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"type": "TRIAL",
											"customerName": "EMQ Technologies Inc.",
											"customerContact": "support@emqx.io",
											"startDate": "2023-12-06",
											"expiredDate": "2123-12-06",
											"expired": false,
											"totalTagCount": 1000,
											"usedTagCount": 1,
											"enabledPlugins": ["ABB COMLI", "Allen-Bradley ControlLogix 5500", "Allen-Bradley DF1", "Allen-Bradley MicroLogix 1400", "BACnet/IP", "Beckhoff ADS", "DLT645-1997", "DLT645-2007", "EtherNet/IP(CIP)", "GE SRTP", "HJ212-2017", "HOSTLINK CMODE", "IEC60870-5-104", "IEC61850", "Inovance Modbus TCP", "KNXnet/IP", "KUKA ETHERNET KRL TCP", "Mitsubishi 1E", "Mitsubishi 3E", "Mitsubishi FX", "Modbus RTU", "Modbus TCP", "Modbus TCP QH", "NON A11", "OPC UA", "Omron FINS TCP", "Omron FINS UDP", "Panasonic Mewtocol", "Profinet IO", "SECS GEM HSMS", "Siemens FetchWrite", "Siemens RK512", "Siemens S7 ISOTCP", "Siemens S7 ISOTCP for 300/400", "SparkPlugB", "WebSocket"],
											"hardwareToken": "",
											"ekuiperOn": true,
											"officialEmail": "support@emqx.io"
										}
									}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/license/activation_code": {
			"post": {
				"summary": "Register the activation code and automatically import the eco-license.",
				"deprecated": false,
				"description": "",
				"operationId": "RegisterActivationCode",
				"tags": ["license"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SendActivationCodeReqData"
							},
							"example": {
								"activationCode": "6YnJBVBOcL2pBQgwnPdtdtW..."
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StatusError"
								}
							}
						},
						"headers": {}
					},
					"204": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/license/floating": {
			"post": {
				"summary": "ECP deliver floating license to NeuronEX",
				"deprecated": false,
				"description": "",
				"operationId": "DeliverFloatingLicense",
				"tags": ["license"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeliverLicenseReqData"
							},
							"example": {
								"license": "CAIaFUVNUSBUZWNobm9s..."
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StatusError"
								}
							}
						},
						"headers": {}
					},
					"204": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/license/tag": {
			"get": {
				"summary": "Get the number of tags in use",
				"deprecated": false,
				"description": "",
				"operationId": "GetUsedTag",
				"tags": ["license"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsedTagCountResponse"
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "Deliver Tag When NeuronEx is managed by ECP.",
				"deprecated": false,
				"description": "",
				"operationId": "DeliverTag",
				"tags": ["license"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeliverLicenseReqData"
							},
							"example": {
								"license": "CAIaFUVNUSBUZWNobm9s..."
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StatusError"
								}
							}
						},
						"headers": {}
					},
					"204": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "ECP assigns 0 tags to NeuronEX or unmanages NeuronEX",
				"deprecated": false,
				"description": "",
				"operationId": "RemoveVirtualLicense",
				"tags": ["license"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"204": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/plugin/portable": {
			"post": {
				"summary": "Create ekuiper plugin ",
				"deprecated": false,
				"description": "",
				"tags": ["ekuiper_plugin"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"address": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"operationId": {
										"type": "integer"
									}
								},
								"required": ["address", "name", "operationId"]
							},
							"example": {
								"address": "http://127.0.0.1:9081",
								"name": "123456",
								"operationId": 10
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": ""
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ek_service": {
			"post": {
				"summary": "Create external service",
				"deprecated": false,
				"description": "",
				"tags": ["ekuiper_plugin"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"address": {
										"type": "string"
									},
									"headers": {
										"type": "object",
										"properties": {}
									}
								},
								"required": ["name", "address", "headers"]
							},
							"example": {
								"name": "test",
								"address": "http://127.0.0.1:9081",
								"headers": {}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": ""
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ek_service/${serviceName}": {
			"delete": {
				"summary": "Delete  external service ",
				"deprecated": false,
				"description": "",
				"tags": ["ekuiper_plugin"],
				"parameters": [{
					"name": "serviceName",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": ""
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/tunnel": {
			"get": {
				"summary": "Get ECP Tunnel Config info",
				"deprecated": false,
				"description": "",
				"tags": ["tunnel"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"enable": {
											"type": "boolean"
										},
										"enableSSL": {
											"type": "boolean"
										},
										"registerId": {
											"type": "string"
										}
									},
									"required": ["enable", "enableSSL", "registerId"]
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"enable": false,
											"enableSSL": false,
											"registerId": "dc3e97118e33-1115b9328bfb58948407"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "ECP Tunnel configuration",
				"deprecated": false,
				"description": "",
				"tags": ["tunnel"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"enable": {
										"type": "boolean"
									},
									"enableSSL": {
										"type": "boolean"
									},
									"address": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"password": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"certificationRaw": {
										"type": "string"
									},
									"privateKeyRaw": {
										"type": "string"
									},
									"rootCARaw": {
										"type": "string"
									},
									"registerId": {
										"type": "string"
									}
								},
								"required": ["enable", "enableSSL", "address", "username", "password", "description", "certificationRaw", "privateKeyRaw", "rootCARaw", "registerId"]
							},
							"example": {
								"enable": false,
								"enableSSL": false,
								"address": "tcp://127.0.0.1:1883",
								"username": "admin",
								"password": "password",
								"description": "test",
								"certificationRaw": "cert_base64",
								"privateKeyRaw": "key_base64",
								"rootCARaw": "ca_base64",
								"registerId": "1234567890"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/management/cancel": {
			"post": {
				"summary": "Cancel being Managed by ECP",
				"deprecated": false,
				"description": "",
				"operationId": "CancelManagement",
				"tags": ["management"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/liveness/report": {
			"get": {
				"summary": "Query liveness info",
				"deprecated": false,
				"description": "",
				"operationId": "GetLivenessConfig",
				"tags": ["liveness"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LivenessReq"
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"endpointUrl": "",
											"serviceId": "",
											"interval": 0
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "Liveness configuration",
				"deprecated": false,
				"description": "",
				"operationId": "livenessConfigHandler",
				"tags": ["liveness"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LivenessReq"
							},
							"example": {
								"endpointUrl": "127.0.0.1:1456",
								"serviceId": "123456",
								"interval": 10
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/log": {
			"get": {
				"summary": "Get NeuronEX log level configuration",
				"deprecated": false,
				"description": "",
				"operationId": "LoglevelGetting",
				"tags": ["log"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/responseLogData"
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"level": "info"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "Set NeuronEX log level configuration",
				"deprecated": false,
				"description": "",
				"operationId": "LoglevelSetting",
				"tags": ["log"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoglevelSettingReqData"
							},
							"example": {
								"level": "info"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/log/ekuiper": {
			"get": {
				"summary": "Download data processing engine log",
				"deprecated": false,
				"description": "",
				"operationId": "DownloadEkuiperLog",
				"tags": ["log"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": "log ..."
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/log/neuron": {
			"get": {
				"summary": "Download data collection engine log",
				"deprecated": false,
				"description": "",
				"operationId": "DownloadNeuronLog",
				"tags": ["log"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": "log ..."
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/log/neuron/{nodeName}": {
			"get": {
				"summary": "Download the log of data collection engine driver node",
				"deprecated": false,
				"description": "",
				"operationId": "DownloadNeuronLogByNodeName",
				"tags": ["log"],
				"parameters": [{
					"name": "nodeName",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": "log ..."
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/log/neuronex": {
			"get": {
				"summary": "Download NeuronEX  log",
				"deprecated": false,
				"description": "",
				"operationId": "DownloadNeuronexLog",
				"tags": ["log"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": "log ..."
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/template": {
			"get": {
				"summary": "Export Global Configuration Template",
				"deprecated": false,
				"description": "",
				"operationId": "Export",
				"tags": ["template"],
				"parameters": [{
					"name": "category",
					"in": "query",
					"description": "Category 1: ekuiper, 2: neuron",
					"required": true,
					"example": 0,
					"schema": {
						"type": "integer"
					}
				}, {
					"name": "nodes",
					"in": "query",
					"description": "List of nodes to be queried",
					"required": false,
					"example": "south1,south3",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "rules",
					"in": "query",
					"description": "List of rules to be queried",
					"required": false,
					"example": "rule1,rule2",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"streams": {
											"type": "object",
											"properties": {
												"neuronStream": {
													"type": "string"
												}
											},
											"required": ["neuronStream"]
										},
										"tables": {
											"type": "object",
											"properties": {}
										},
										"rules": {
											"type": "object",
											"properties": {}
										},
										"nativePlugins": {
											"type": "object",
											"properties": {}
										},
										"portablePlugins": {
											"type": "object",
											"properties": {}
										},
										"sourceConfig": {
											"type": "object",
											"properties": {}
										},
										"sinkConfig": {
											"type": "object",
											"properties": {}
										},
										"connectionConfig": {
											"type": "object",
											"properties": {}
										},
										"Service": {
											"type": "object",
											"properties": {}
										},
										"Schema": {
											"type": "object",
											"properties": {}
										},
										"uploads": {
											"type": "object",
											"properties": {}
										}
									},
									"required": ["streams", "tables", "rules", "nativePlugins", "portablePlugins", "sourceConfig", "sinkConfig", "connectionConfig", "Service", "Schema", "uploads"]
								},
								"examples": {
									"1": {
										"summary": "ekuiper success",
										"value": {
											"streams": {
												"neuronStream": "CREATE STREAM neuronStream() WITH (TYPE=\"neuron\",FORMAT=\"json\",CONF_KEY=\"default\",SHARED=\"TRUE\");"
											},
											"tables": {},
											"rules": {},
											"nativePlugins": {},
											"portablePlugins": {},
											"sourceConfig": {},
											"sinkConfig": {},
											"connectionConfig": {},
											"Service": {},
											"Schema": {},
											"uploads": {}
										}
									}
								}
							}
						},
						"headers": {}
					},
					"x-200:query ekuiper template sueccess": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"nodes": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"plugin": {
														"type": "string"
													},
													"name": {
														"type": "string"
													}
												}
											}
										},
										"groups": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"tags": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"subscriptions": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"settings": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"node": {
														"type": "string"
													},
													"params": {
														"type": "object",
														"properties": {
															"host": {
																"type": "string"
															},
															"port": {
																"type": "integer"
															}
														},
														"required": ["host", "port"]
													}
												}
											}
										}
									},
									"required": ["nodes", "groups", "tags", "subscriptions", "settings"]
								},
								"examples": {
									"1": {
										"summary": "query ekuiper template sueccess",
										"value": {
											"nodes": [{
												"plugin": "eKuiper",
												"name": "Processing"
											}],
											"groups": [],
											"tags": [],
											"subscriptions": [],
											"settings": [{
												"node": "Processing",
												"params": {
													"host": "127.0.0.1",
													"port": 7081
												}
											}]
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "Deliver Global Configuration Template",
				"deprecated": false,
				"description": "",
				"operationId": "Deliver",
				"tags": ["template"],
				"parameters": [{
					"name": "category",
					"in": "query",
					"description": "Category 1: ekuiper, 2: neuron ",
					"required": true,
					"example": 0,
					"schema": {
						"type": "integer"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"template": {
										"type": "string",
										"description": "optional, Node data to be deliver if category is 1, or rule data to be deliver if category is 2 "
									},
									"ruleData": {
										"type": "string",
										"description": "optional, Rule data to be deliver "
									},
									"NodeData": {
										"type": "string",
										"description": "optional, Node data to be deliver "
									},
									"operationId": {
										"type": "integer",
										"description": "optional,if operationId > 0, The operation will be logged and pushed"
									}
								}
							},
							"example": {
								"template": "{\n    \"streams\": {\n        \"neuronStream\": \"CREATE STREAM neuronStream() WITH (TYPE=\\\"neuron\\\",FORMAT=\\\"json\\\",CONF_KEY=\\\"default\\\",SHARED=\\\"TRUE\\\");\"\n    },\n    \"tables\": {},\n    \"rules\": {},\n    \"nativePlugins\": {},\n    \"portablePlugins\": {},\n    \"sourceConfig\": {},\n    \"sinkConfig\": {},\n    \"connectionConfig\": {},\n    \"Service\": {},\n    \"Schema\": {},\n    \"uploads\": {}\n}"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string",
											"description": "failed reason message"
										}
									},
									"required": ["message"]
								},
								"examples": {
									"1": {
										"summary": "Json format err",
										"value": {
											"message": "Json format err"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/process/ekuiper/start": {
			"get": {
				"summary": "Start ekuiper process",
				"deprecated": false,
				"description": "",
				"operationId": "StartKuiper",
				"tags": ["process_control"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/process/ekuiper/stop": {
			"get": {
				"summary": "Stop ekuiper process",
				"deprecated": false,
				"description": "",
				"operationId": "StopKuiper",
				"tags": ["process_control"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/process/status": {
			"get": {
				"summary": "The status of ekuiper and Neuron process",
				"deprecated": false,
				"description": "",
				"operationId": "KuiperNeuronStatus",
				"tags": ["process_control"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/status/liveness": {
			"get": {
				"summary": "Get NeuronEX liveness status",
				"deprecated": false,
				"description": "",
				"operationId": "LiveStatusGetting",
				"tags": ["status"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"liveness": {
											"type": "object",
											"properties": {
												"in": {
													"type": "integer"
												},
												"out": {
													"type": "integer"
												}
											},
											"required": ["in", "out"]
										}
									},
									"required": ["liveness"]
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"liveness": {
												"in": 853,
												"out": 0
											}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/status/log": {
			"get": {
				"summary": "Get NeuronEX syslog status",
				"deprecated": false,
				"description": "",
				"operationId": "SyslogStatusGetting",
				"tags": ["status"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"server": {
											"type": "object",
											"properties": {
												"in": {
													"type": "integer"
												},
												"out": {
													"type": "integer"
												}
											},
											"required": ["in", "out"]
										},
										"outSend": {
											"type": "object",
											"properties": {
												"in": {
													"type": "integer"
												},
												"out": {
													"type": "integer"
												}
											},
											"required": ["in", "out"]
										},
										"sse": {
											"type": "object",
											"properties": {
												"in": {
													"type": "integer"
												},
												"out": {
													"type": "integer"
												},
												"neuron": {
													"type": "object",
													"properties": {
														"in": {
															"type": "integer"
														},
														"out": {
															"type": "integer"
														}
													},
													"required": ["in", "out"]
												},
												"neuronex": {
													"type": "object",
													"properties": {
														"in": {
															"type": "integer"
														},
														"out": {
															"type": "integer"
														}
													},
													"required": ["in", "out"]
												},
												"ekuiper": {
													"type": "object",
													"properties": {
														"in": {
															"type": "integer"
														},
														"out": {
															"type": "integer"
														}
													},
													"required": ["in", "out"]
												},
												"others": {
													"type": "object",
													"properties": {
														"in": {
															"type": "integer"
														},
														"out": {
															"type": "integer"
														}
													},
													"required": ["in", "out"]
												},
												"clientNumber": {
													"type": "integer"
												}
											},
											"required": ["in", "out", "neuron", "neuronex", "ekuiper", "others", "clientNumber"]
										}
									},
									"required": ["server", "outSend", "sse"]
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"server": {
												"in": 75668145,
												"out": 75668144
											},
											"outSend": {
												"in": 75668145,
												"out": 2513
											},
											"sse": {
												"in": 75668145,
												"out": 75668144,
												"neuron": {
													"in": 464,
													"out": 464
												},
												"neuronex": {
													"in": 75665075,
													"out": 75665074
												},
												"ekuiper": {
													"in": 93,
													"out": 93
												},
												"others": {
													"in": 2513,
													"out": 2513
												},
												"clientNumber": 0
											}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/status/ecp_tunnel": {
			"get": {
				"summary": "Get ecp tunnel status",
				"deprecated": false,
				"description": "Get ecp tunnel status",
				"tags": ["status"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"description": "tunnel status,value can be init,idle,subscribe serviceId,subscribe revoke serviceId,activating,subscribe configuration,revoke serviceId,ECP config modified."
										}
									},
									"required": ["status"]
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"status": "init"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/stream/log": {
			"get": {
				"summary": "Get NeuronEX streaming log",
				"deprecated": false,
				"description": "",
				"operationId": "StreamingLog",
				"tags": ["sse"],
				"parameters": [{
					"name": "type",
					"in": "query",
					"description": "",
					"required": false,
					"example": "0",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "priority",
					"in": "query",
					"description": "",
					"required": false,
					"example": "10",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"text/event-stream": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": "2023-12-20T07:55:49Z neuronex[1]: level=error msg=\"forward syslog to server error [&{0x174ba08 true 0xc00054e000 neuronex neuronex-231220 6 localhost:10514}][failed to get connection]\" file=\"syslog/out_send.go:113\" func=\"internal/syslog.(*SendOut).Process\""
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/stream/clients": {
			"get": {
				"summary": "Get stream client status",
				"deprecated": false,
				"description": "Get stream client status",
				"tags": ["sse"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"clientAddress": {
												"type": "string"
											}
										}
									}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": [{
											"clientAddress": "127.0.0.1:9081"
										}]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/sso": {
			"get": {
				"summary": "Get all SSO configurations",
				"deprecated": false,
				"description": "",
				"operationId": "QuerySSOConfigs",
				"tags": ["sso"],
				"parameters": [{
					"name": "enabled",
					"in": "query",
					"description": "Optional, query configurations by 'enabled' field",
					"required": false,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"url": {
												"type": "string"
											},
											"clientId": {
												"type": "string"
											},
											"clientSecret": {
												"type": "string"
											},
											"type": {
												"type": "string"
											},
											"enabled": {
												"type": "boolean",
												"default": false
											}
										},
										"required": ["name", "url", "clientId", "clientSecret", "type", "enabled"]
									}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": [{
											"name": "sso1",
											"url": "https://iamnew.ctwing.cn",
											"clientId": "8I744Myxxxx",
											"clientSecret": "5jMnFyxxxx",
											"type": "oauth2",
											"enabled": true
										}, {
											"name": "sso2",
											"url": "https://iamnew.ctwing.cn",
											"clientId": "VDx2v0uxxxx",
											"clientSecret": "1uu9c5xxxx",
											"type": "oauth2",
											"enabled": false
										}]
									}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "Add a new SSO configuration",
				"deprecated": false,
				"description": "",
				"operationId": "SSOConfigHandler",
				"tags": ["sso"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SSOConfigBody"
							},
							"example": {
								"name": "sso1",
								"url": "https://iamnew.ctwing.cn",
								"clientId": "VDx2v0usxxx",
								"clientSecret": "1uu9c5xxxx",
								"type": "oauth2",
								"enabled": false
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/sso/{serverName}/oauth2": {
			"get": {
				"summary": "SSO Handling",
				"deprecated": false,
				"description": "",
				"operationId": "OAuth2Handler",
				"tags": ["sso"],
				"parameters": [{
					"name": "serverName",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "code",
					"in": "query",
					"description": "",
					"required": true,
					"example": "5068471130381875",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/neuron-token"
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzcyODcxNjMsImlhdCI6MTYzNzIwMDc2MywiaXNzIjoiRU1RIFRlY2hub2xvZ2llcyBDby4sIEx0ZCBBbGwgcmlnaHRzIHJlc2VydmVkLiIsInBhc3MiOiIwMDAwIiwidXNlciI6ImFkbWluIn0.2EZzPC9djErrCeYNrK2av0smh-eKxDYeyu7cW4MyknI"
										}
									}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/monitor/alert": {
			"get": {
				"summary": "Alert types currently supported by NeuronEX",
				"deprecated": false,
				"description": "",
				"operationId": "AlertRuleConfig",
				"tags": ["monitor"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"ruleId": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"desc": {
												"type": "string"
											}
										},
										"required": ["ruleId", "name", "desc"]
									}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": [{
											"ruleId": "1",
											"name": "node_exception_alert",
											"desc": "Data collection node exception alert"
										}, {
											"ruleId": "2",
											"name": "rule_exception_alert",
											"desc": "Data processing rule exception alert"
										}, {
											"ruleId": "3",
											"name": "restart_alert",
											"desc": "neuronex restart alert"
										}]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/monitor/alert_config": {
			"get": {
				"summary": "Query the current alert rule-related settings",
				"deprecated": false,
				"description": "",
				"operationId": "QueryAlertRuleConfig",
				"tags": ["monitor"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"enabled": {
											"type": "boolean"
										},
										"webhookUrl": {
											"type": "string"
										},
										"interval": {
											"type": "integer"
										},
										"fireChecks": {
											"type": "integer"
										},
										"resolveChecks": {
											"type": "integer"
										},
										"alertsConfig": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									},
									"required": ["enabled", "webhookUrl", "interval", "fireChecks", "resolveChecks", "alertsConfig"]
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"enabled": true,
											"webhookUrl": "https://www.baidu.com",
											"interval": 15,
											"fireChecks": 0,
											"resolveChecks": 0,
											"alertsConfig": [{
												"ruleId": "3",
												"fireChecks": 1,
												"resolveChecks": -1,
												"ruleName": "restart_alert"
											}, {
												"ruleId": "1",
												"fireChecks": 3,
												"resolveChecks": 3,
												"ruleName": "node_exception_alert"
											}, {
												"ruleId": "2",
												"fireChecks": 1,
												"resolveChecks": 1,
												"ruleName": "rule_exception_alert"
											}]
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "Configure Alert rule-related settings.",
				"deprecated": false,
				"description": "",
				"operationId": "DistributeAlertRuleConfig",
				"tags": ["monitor"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"enabled": {
										"type": "boolean",
										"description": "false: disabled, true: enabled ,If the value is false, the other fields are non-required"
									},
									"webhookUrl": {
										"type": "string",
										"description": "required if enabled is true,the webhook that alert events are pushed to"
									},
									"interval": {
										"type": "integer",
										"description": "required if enabled is true"
									},
									"fireChecks": {
										"type": "integer",
										"description": "required if alertsConfig is empty, the default fireChecks for all rules in alertsConfig"
									},
									"resolveChecks": {
										"type": "integer",
										"description": "required if alertsConfig is empty, the default resolveChecks for all rules in alertsConfig"
									},
									"alertsConfig": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"ruleId": {
													"type": "string"
												},
												"fireChecks": {
													"type": "integer",
													"description": "how many consecutive monitoring times will trigger an alarm,means that N.Value must be greater than 0 unless ruleId=3, value can be -1"
												},
												"resolveChecks": {
													"type": "integer",
													"description": "how many times to monitor continuously, the alarm will be resumed,means that P.Value must be greater than 0 unless ruleId=3, value can be -1"
												}
											}
										},
										"description": "optional, the setting of the rule alerts to be pushed,if it is empty, it means that requires all alert types."
									}
								},
								"required": ["enabled", "webhookUrl", "interval"]
							},
							"example": {
								"enabled": true,
								"webhookUrl": "https://www.baidu.com",
								"interval": 15,
								"fireChecks": 0,
								"resolveChecks": 0,
								"alertsConfig": [{
									"ruleId": "3",
									"fireChecks": 1,
									"resolveChecks": -1
								}, {
									"ruleId": "1",
									"fireChecks": 3,
									"resolveChecks": 3
								}, {
									"ruleId": "2",
									"fireChecks": 1,
									"resolveChecks": 1
								}]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/monitor/alert_result": {
			"get": {
				"summary": "Query recently generated alert events",
				"deprecated": false,
				"description": "",
				"operationId": "QueryAlertResult",
				"tags": ["monitor"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"firing": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"ruleId": {
														"type": "string"
													},
													"labels:": {
														"type": "object",
														"properties": {
															"driver": {
																"type": "string"
															}
														},
														"required": ["driver"]
													}
												}
											},
											"description": "alert fire event array"
										},
										"resolved": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"ruleId": {
														"type": "string"
													},
													"labels:": {
														"type": "object",
														"properties": {
															"rule": {
																"type": "string"
															}
														},
														"required": ["rule"]
													}
												}
											},
											"description": "alert resolved event array"
										},
										"timestamp": {
											"type": "string"
										}
									},
									"required": ["firing", "resolved", "timestamp"]
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"firing": [{
												"ruleId": "xxx",
												"labels:": {
													"driver": "xxx"
												}
											}],
											"resolved": [{
												"ruleId": "xxx",
												"labels:": {
													"rule": "xxx"
												}
											}],
											"timestamp": "2024-01-01T09:52:26.739266876+08:00"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/monitor/metric": {
			"get": {
				"summary": "Metrics currently supported by NeuronEX",
				"deprecated": false,
				"description": "",
				"operationId": "MetricConfig",
				"tags": ["monitor"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"metricId": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"desc": {
												"type": "string"
											}
										},
										"required": ["metricId", "name", "desc"]
									}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": [{
											"metricId": "1",
											"name": "os_info",
											"desc": "OS distro and kernel version"
										}, {
											"metricId": "2",
											"name": "cpu_percent",
											"desc": "Total CPU utilisation percentage"
										}, {
											"metricId": "3",
											"name": "cpu_cores",
											"desc": "Number of CPU cores"
										}, {
											"metricId": "4",
											"name": "mem_total_bytes",
											"desc": "Total installed memory in bytes"
										}]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/monitor/metric_config": {
			"get": {
				"summary": "Query the current metric-related settings",
				"deprecated": false,
				"description": "",
				"operationId": "QueryMetricConfig",
				"tags": ["monitor"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"enabled": {
											"type": "boolean"
										},
										"prometheusUrl": {
											"type": "string"
										},
										"interval": {
											"type": "integer"
										},
										"labels": {
											"type": "object",
											"properties": {
												"instance": {
													"type": "string"
												},
												"org_id": {
													"type": "string"
												},
												"project_id": {
													"type": "string"
												},
												"service_id": {
													"type": "string"
												}
											},
											"required": ["instance", "org_id", "project_id", "service_id"]
										},
										"metrics": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"metricId": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"desc": {
														"type": "string"
													}
												},
												"required": ["metricId", "name", "desc"]
											}
										}
									},
									"required": ["enabled", "prometheusUrl", "interval", "labels", "metrics"]
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"enabled": true,
											"prometheusUrl": "http://127.0.0.1:9091",
											"interval": 15,
											"labels": {
												"instance": "127.0.0.1:8111",
												"org_id": "76995af8",
												"project_id": "c1c69f9d",
												"service_id": "55f20f8b"
											},
											"metrics": [{
												"metricId": "13",
												"name": "north_nodes_total",
												"desc": "Number of north nodes"
											}, {
												"metricId": "14",
												"name": "north_running_nodes_total",
												"desc": "Number of north nodes in running state"
											}, {
												"metricId": "15",
												"name": "north_disconnected_nodes_total",
												"desc": "Number of north nodes disconnected"
											}, {
												"metricId": "16",
												"name": "south_nodes_total",
												"desc": "Number of south nodes"
											}, {
												"metricId": "17",
												"name": "south_running_nodes_total",
												"desc": "Number of south nodes in running state"
											}, {
												"metricId": "20",
												"name": "license_max_tags",
												"desc": "License tags limit"
											}, {
												"metricId": "21",
												"name": "license_used_tags",
												"desc": "License total used tags"
											}, {
												"metricId": "1031",
												"name": "kuiper_op_records_in_total",
												"desc": "Total number of messages received by the operation of kuiper_op"
											}, {
												"metricId": "1032",
												"name": "kuiper_op_records_out_total",
												"desc": "Total number of messages published by the operation of kuiper_op"
											}, {
												"metricId": "2000",
												"name": "running_nodes_total",
												"desc": "Number of nodes in running state"
											}, {
												"metricId": "2001",
												"name": "exception_nodes_total",
												"desc": "Number of nodes in running state"
											}, {
												"metricId": "2002",
												"name": "south_connected_nodes_total",
												"desc": "Number of south nodes connected"
											}, {
												"metricId": "2003",
												"name": "south_exception_nodes_total",
												"desc": "Number of south in exception state"
											}, {
												"metricId": "2004",
												"name": "north_connected_nodes_total",
												"desc": "Number of north nodes connected"
											}, {
												"metricId": "2005",
												"name": "north_exception_nodes_total",
												"desc": "Number of north in exception state"
											}, {
												"metricId": "2006",
												"name": "running_rules_total",
												"desc": "Number of rules in running state"
											}, {
												"metricId": "2007",
												"name": "stopped_rules_total",
												"desc": "Number of rules in stopped state"
											}, {
												"metricId": "2008",
												"name": "not_running_node",
												"desc": "Node not in running state"
											}, {
												"metricId": "2009",
												"name": "exception_node",
												"desc": "Node in exception state"
											}, {
												"metricId": "3000",
												"name": "not_running_rule",
												"desc": "Rule not in running state"
											}]
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "Configure Metric-related settings.",
				"deprecated": false,
				"description": "",
				"operationId": "DistributeMetricConfig",
				"tags": ["monitor"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"enabled": {
										"type": "boolean",
										"description": "required,false: disabled, true: enabled ,If the value is false, the other fields are non-required"
									},
									"prometheusUrl": {
										"type": "string",
										"description": " required if enabled is true, the url of pushgateway,like http://localhost:9091"
									},
									"prometheusUsername": {
										"type": "string",
										"description": "optional, the url of username for pushgateway"
									},
									"prometheusPassword": {
										"type": "string",
										"description": " optional, the url of password for pushgateway"
									},
									"metricIds": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"description": "optional, metric id array,a value of null means push all metric data."
									},
									"interval": {
										"type": "integer",
										"description": "required if enabled is true, the interval of generating metrics data,unit is second"
									},
									"labels": {
										"type": "object",
										"properties": {
											"key1": {
												"type": "string"
											}
										},
										"description": "optional, additional labels needed for metric, will be pushed to pushgateway along with the metrics data for grouping of metrics,key: label name,value: label value"
									}
								},
								"required": ["enabled", "prometheusUrl", "interval"]
							},
							"example": {
								"enabled": false,
								"prometheusUrl": "http://127.0.0.1:9091",
								"prometheusUsername": "",
								"prometheusPassword": "",
								"metricIds": ["13", "14", "15", "16", "17", "20", "21", "1031", "1032", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "3000"],
								"interval": 15,
								"labels": {
									"category": "4",
									"org_id": "ef5f285a",
									"project_id": "c46ffe05",
									"service_id": "25a967f3",
									"type": "4"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/monitor/metric_contents": {
			"get": {
				"summary": "Query the most recent metric data",
				"deprecated": false,
				"description": "",
				"operationId": "MetricContents",
				"tags": ["monitor"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": "license_max_tags 30\nlicense_used_tags 0\nnorth_nodes_total 1\nnorth_running_nodes_total 1\nnorth_disconnected_nodes_total 1\nsouth_nodes_total 0\nsouth_running_nodes_total 0\nrunning_nodes_total 1\nexception_nodes_total 1\nsouth_connected_nodes_total 0\nsouth_exception_nodes_total 0\nnorth_connected_nodes_total 0\nnorth_exception_nodes_total 1\nrunning_rules_total 0\nstopped_rules_total 0\n"
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/node": {
			"post": {
				"summary": "Add Node",
				"deprecated": false,
				"description": "Add Node",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"description": "node name",
										"type": "string",
										"title": "node name"
									},
									"plugin": {
										"type": "string",
										"title": "plugin name"
									},
									"params": {
										"type": "array",
										"title": "setting (optional)",
										"items": {
											"type": "object",
											"properties": {
												"param1": {
													"type": "integer",
													"description": ""
												},
												"param2": {
													"type": "string",
													"description": ""
												},
												"param3": {
													"type": "bool",
													"description": ""
												},
												"param4": {
													"type": "integer",
													"description": ""
												}
											}
										}
									}
								},
								"required": ["name", "plugin"]
							},
							"example": {
								"name": "modbus-tcp-node",
								"plugin": "Modbus TCP"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "node type invalid",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node type invalid",
										"value": {
											"error": 2001
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "library not found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "library not found",
										"value": {
											"error": 2301
										}
									}
								}
							}
						},
						"headers": {}
					},
					"409": {
						"description": "node exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node exist",
										"value": {
											"error": 2002
										}
									}
								}
							}
						},
						"headers": {}
					},
					"x-400:Bad Request": {
						"description": "node setting invalid",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node setting invalid",
										"value": {
											"error": 2004
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Del node",
				"deprecated": false,
				"description": "Delete node",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"description": "node name"
									}
								},
								"required": ["name"]
							},
							"example": {
								"name": "modbus-tcp-node"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "node not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Get node",
				"deprecated": false,
				"description": "Get node",
				"tags": ["configuration"],
				"parameters": [{
					"name": "type",
					"in": "query",
					"description": "Type of the node,type=1 means southbound node,type=2 means northbound node",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "plugin",
					"in": "query",
					"description": "Plugin type of the node",
					"required": false,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "node",
					"in": "query",
					"description": "Name of the node",
					"required": false,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "node not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"put": {
				"summary": "Update node",
				"deprecated": false,
				"description": "Update node",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"new_name": {
										"type": "string"
									}
								},
								"required": ["name", "new_name"]
							},
							"example": {
								"name": "modbus-node",
								"new_name": "modbus-tcp-node"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "400",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "integer"
										}
									},
									"required": ["error"]
								},
								"examples": {
									"1": {
										"summary": "node not allow update",
										"value": {
											"error": 2013
										}
									},
									"2": {
										"summary": "node name is empty",
										"value": {
											"error": 2015
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "node not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "integer"
										}
									},
									"required": ["error"]
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									}
								}
							}
						},
						"headers": {}
					},
					"409": {
						"description": "node exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "integer"
										}
									},
									"required": ["error"]
								},
								"examples": {
									"1": {
										"summary": "node exist",
										"value": {
											"error": 2002
										}
									}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "500",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "integer"
										}
									},
									"required": ["error"]
								},
								"examples": {
									"1": {
										"summary": "internal server error",
										"value": {
											"error": 1001
										}
									},
									"2": {
										"summary": "server is busy",
										"value": {
											"error": 1010
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/node/setting": {
			"get": {
				"summary": "Get Node Setting",
				"deprecated": false,
				"description": "Get Node Setting",
				"tags": ["configuration"],
				"parameters": [{
					"name": "node",
					"in": "query",
					"description": "Node name",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"node": {
											"type": "string"
										},
										"params": {
											"type": "object",
											"properties": {}
										}
									},
									"description": "//The parameter fields in json fill in different fields according to different plugins"
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"node": "modbus-node",
											"params": {
												"param1": "1.1.1.1",
												"param2": 502
											}
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "node not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "Node Setting",
				"deprecated": false,
				"description": "Please refer to [Plugin Setting](https://docs.emqx.com/zh/neuronex/latest/api/plugin-setting.html) for the configuration parameters of each plugin.",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"node": {
										"type": "string"
									},
									"params": {
										"type": "object",
										"properties": {
											"param1": {
												"type": "integer"
											},
											"param2": {
												"type": "string"
											},
											"param3": {
												"type": "boolean"
											},
											"param4": {
												"type": "number"
											}
										},
										"required": ["param1", "param2", "param3", "param4"],
										"description": "The parameter fields in json fill in different fields according to different plugins"
									}
								},
								"required": ["node", "params"]
							},
							"example": {
								"node": "modbus-node",
								"params": {
									"param1": 1,
									"param2": "1.1.1.1",
									"param3": true,
									"param4": 11.22
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									},
									"2": {
										"summary": "node setting invalid",
										"value": {
											"error": 2004
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/node/ctl": {
			"post": {
				"summary": "Node CTL",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"node": {
										"type": "string"
									},
									"cmd": {
										"type": "integer",
										"enum": [0, 1],
										"description": "0 start, 1 stop"
									}
								}
							},
							"example": {
								"node": "modbus-node",
								"cmd": 0
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"409": {
						"description": "Conflict",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not ready",
										"value": {
											"error": 2006
										}
									},
									"2": {
										"summary": "node is running",
										"value": {
											"error": 2007
										}
									},
									"3": {
										"summary": "node not running",
										"value": {
											"error": 2008
										}
									},
									"4": {
										"summary": "node is stopped",
										"value": {
											"error": 2009
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/node/state": {
			"get": {
				"summary": "Get Node State",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [{
					"name": "node",
					"in": "query",
					"description": "Node name",
					"required": false,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"states": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"node": {
														"type": "string",
														"description": "node name"
													},
													"running": {
														"type": "integer",
														"description": "running state"
													},
													"link": {
														"type": "integer",
														"description": "link state"
													},
													"rtt": {
														"type": "integer",
														"description": "average round trip time communicating with devices"
													}
												}
											}
										}
									}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"states": [{
												"node": "modbus-node1",
												"running": 2,
												"link": 1,
												"rtt": 100
											}, {
												"node": "modbus-node2",
												"running": 1,
												"link": 0,
												"rtt": 9999
											}]
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/group": {
			"post": {
				"summary": "Add Group",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"group": {
										"type": "string",
										"description": "group name"
									},
									"node": {
										"type": "string",
										"description": "node name"
									},
									"interval": {
										"type": "integer",
										"description": "read/upload interval(ms)"
									}
								}
							},
							"example": {
								"group": "gconfig1",
								"node": "modbus-node",
								"interval": 10000
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "node not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									}
								}
							}
						},
						"headers": {}
					},
					"409": {
						"description": "group not allow",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "group not allow",
										"value": {
											"error": 2103
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Del Group",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"group": {
										"type": "string",
										"description": "group name"
									},
									"node": {
										"type": "string",
										"description": "node name"
									}
								}
							},
							"example": {
								"group": "gconfig1",
								"node": "modbus-node"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									},
									"2": {
										"summary": "group not exist",
										"value": {
											"error": 2106
										}
									}
								}
							}
						},
						"headers": {}
					},
					"412": {
						"description": "group already subscribed",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "group already subscribed",
										"value": {
											"error": 2101
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"put": {
				"summary": "Update Group",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"node": {
										"type": "string",
										"description": "node name"
									},
									"group": {
										"type": "string",
										"description": "group name"
									},
									"new_name": {
										"type": "string",
										"description": "group new name"
									},
									"interval": {
										"type": "integer",
										"description": "read/upload interval(ms)"
									}
								},
								"required": ["node", "group"]
							},
							"example": {
								"node": "modbus-node",
								"group": "gconfig1",
								"new_name": "group1",
								"interval": 10000
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									},
									"2": {
										"summary": "group not exist",
										"value": {
											"error": 2106
										}
									}
								}
							}
						},
						"headers": {}
					},
					"409": {
						"description": "group exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "group exist",
										"value": {
											"error": 2104
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Get Group",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [{
					"name": "node",
					"in": "query",
					"description": "Node name",
					"required": false,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"groups": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"name": {
														"type": "string"
													},
													"interval": {
														"type": "integer"
													},
													"tag_count": {
														"type": "integer"
													}
												}
											}
										}
									}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"groups": [{
												"name": "config_modbus_tcp_sample_2",
												"interval": 2000,
												"tag_count": 0
											}, {
												"name": "gconfig1",
												"interval": 10000,
												"tag_count": 0
											}]
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/tags": {
			"post": {
				"summary": "Add Tag",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"node": {
										"type": "string"
									},
									"group": {
										"type": "string"
									},
									"tags": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string",
													"description": "tag name"
												},
												"address": {
													"type": "string",
													"description": "tag address"
												},
												"attribute": {
													"type": "integer",
													"description": "tag attribute"
												},
												"type": {
													"type": "integer",
													"description": "tag type"
												},
												"precision": {
													"type": "integer",
													"optional": true,
													"description": "optional, float/double precision, optional(0-17)"
												},
												"decimal": {
													"type": "integer",
													"optional": true,
													"description": "optional, decimal"
												},
												"description": {
													"type": "string",
													"optional": true,
													"description": "optional, description"
												}
											},
											"required": ["name", "address", "attribute", "type"]
										}
									}
								},
								"required": ["node", "group"]
							},
							"example": {
								"node": "modbus-node",
								"group": "config_modbus_tcp_sample_2",
								"tags": [{
									"name": "tag1",
									"address": "1!400001",
									"attribute": 8,
									"type": 4,
									"precision": 0,
									"decimal": 0,
									"description": "",
									"value": 12
								}, {
									"name": "tag2",
									"address": "1!00001",
									"attribute": 3,
									"type": 3,
									"decimal": 0.01
								}, {
									"name": "tag3",
									"address": "1!400009",
									"attribute": 3,
									"type": 9,
									"precision": 3
								}, {
									"name": "static_tag",
									"address": "",
									"attribute": 10,
									"type": 1,
									"description": "It is a static tag",
									"value": 42
								}]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"index": {
											"type": "integer"
										},
										"error": {
											"type": "integer"
										}
									},
									"required": ["index", "error"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"index": 1,
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"206": {
						"description": "Partial Content",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "tag name conflict",
										"value": {
											"error": 2202
										}
									},
									"2": {
										"summary": "tag attribute not support",
										"value": {
											"error": 2203
										}
									},
									"3": {
										"summary": "tag type not support",
										"value": {
											"error": 2204
										}
									},
									"4": {
										"summary": "tag address format invalid",
										"value": {
											"error": 2205
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "node not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Get Tag",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [{
					"name": "node",
					"in": "query",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "group",
					"in": "query",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "name",
					"in": "query",
					"description": "",
					"required": false,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"tags": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"name": {
														"description": "tag type",
														"type": "string"
													},
													"type": {
														"description": "tag address",
														"type": "integer"
													},
													"address": {
														"description": "tag attribute",
														"type": "string"
													},
													"attribute": {
														"description": "description",
														"type": "integer"
													},
													"description": {
														"description": "float/double precision",
														"type": "string"
													},
													"precision": {
														"description": "decimal",
														"type": "integer"
													},
													"decimal": {
														"description": "optional, when the attribute is static",
														"type": "integer"
													},
													"value": {
														"type": "integer"
													},
													"precison": {
														"type": "integer"
													}
												},
												"required": ["name", "type", "address", "attribute", "description", "decimal", "precison"]
											}
										}
									},
									"required": ["tags"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"tags": [{
												"name": "tag1",
												"type": 8,
												"address": "1!400001",
												"attribute": 0,
												"description": "",
												"precision": 0,
												"decimal": 0,
												"value": 12
											}, {
												"name": "tag2",
												"type": 6,
												"address": "1!400002",
												"attribute": 0,
												"description": "",
												"precision": 0,
												"decimal": 0
											}, {
												"name": "static_tag",
												"address": "",
												"attribute": 10,
												"type": 8,
												"description": "",
												"precision": 0,
												"decimal": 0,
												"value": 42
											}]
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "node not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"put": {
				"summary": "Update Tag",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"node": {
										"description": "node name",
										"type": "string"
									},
									"group": {
										"type": "string",
										"description": "group name"
									},
									"tags": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"description": "tag name",
													"type": "string"
												},
												"type": {
													"description": "tag type",
													"type": "integer"
												},
												"attribute": {
													"description": "tag attribute",
													"type": "integer"
												},
												"address": {
													"description": "tag address",
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"precision": {
													"description": "float/double precison",
													"type": "integer"
												},
												"decimal": {
													"type": "integer"
												}
											},
											"required": ["name", "type", "attribute", "address", "description", "decimal", "precision"]
										}
									}
								},
								"required": ["node", "group", "tags"]
							},
							"example": "{\n    \"node\": \"modbus-tcp-test\",\n    \"group\": \"group1\",\n    \"tags\": [\n        {\n            \"name\": \"tag1\",\n            \"type\": 8,\n            \"attribute\": 0,\n            \"address\": \"1!400001\",\n            \"description\": \"\",\n            \"precision\": 0,\n            \"decimal\": 0,\n            \"value\": 12\n        },\n        {\n            \"name\": \"tag2\",\n            \"type\": 6,\n            \"attribute\": 0,\n            \"address\": \"1!400002\",\n            \"description\": \"\",\n            \"precison\": 0,\n            \"decimal\": 0,\n        },\n        {\n            \"name\": \"static_tag\",\n            \"address\": \"\",\n            \"attribute\": 10,\n            \"type\": 8,\n            \"description\": \"\",\n            \"precison\": 0,\n            \"decimal\": 0,\n            \"value\": 42\n        }\n    ]\n}"
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "integer"
										},
										"index": {
											"type": "integer"
										}
									},
									"required": ["error", "index"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0,
											"index": 1
										}
									}
								}
							}
						},
						"headers": {}
					},
					"206": {
						"description": "206",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "tag not exist",
										"value": {
											"error": 2201
										}
									},
									"2": {
										"summary": "tag name conflict",
										"value": {
											"error": 2202
										}
									},
									"3": {
										"summary": "tag attribute not support",
										"value": {
											"error": 2203
										}
									},
									"4": {
										"summary": "tag type not support",
										"value": {
											"error": 2204
										}
									},
									"5": {
										"summary": "tag address format invalid",
										"value": {
											"error": 2205
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "neuron node/group 404",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "integer"
										}
									},
									"required": ["error"]
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									},
									"2": {
										"summary": "group not exist",
										"value": {
											"error": 2106
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Del Tag",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"group": {
										"description": "group name",
										"type": "string"
									},
									"node": {
										"description": "node name",
										"type": "string"
									},
									"tags": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"description": "tag name"
									}
								},
								"required": ["group", "node", "tags"]
							},
							"example": {
								"group": "config_modbus_tcp_sample_2",
								"node": "modbus-node",
								"tags": ["tag1", "tag2"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "node not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/plugin": {
			"post": {
				"summary": "Add Plugin",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"library": {
										"type": "string",
										"description": "plugin library name"
									},
									"schema_file": {
										"type": "string",
										"format": "binary",
										"description": "plugin schema file"
									},
									"so_file": {
										"type": "string",
										"format": "binary",
										"description": "plugin so file"
									}
								},
								"required": ["library", "schema_file", "so_file"]
							},
							"example": ""
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "library info invalid",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "library info invalid",
										"value": {
											"error": 2302
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Del Plugin",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"plugin": {
										"type": "string",
										"description": "plugin name"
									}
								},
								"required": ["plugin"]
							},
							"example": ""
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Get Plugin",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [{
					"name": "plugin",
					"in": "query",
					"description": "plugin name",
					"required": false,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"plugins": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"kind": {
														"description": "plugin kind",
														"type": "integer"
													},
													"node_type": {
														"type": "integer"
													},
													"name": {
														"type": "string",
														"description": "plugin name"
													},
													"library": {
														"type": "string",
														"description": "plugin library name"
													},
													"description": {
														"type": "string"
													},
													"description_zh": {
														"type": "string"
													},
													"schema": {
														"type": "string"
													}
												},
												"required": ["kind", "node_type", "name", "library", "description", "description_zh", "schema"]
											}
										}
									},
									"required": ["plugins"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"plugins": [{
												"kind": 1,
												"node_type": 1,
												"name": "Modbus TCP",
												"library": "libplugin-modbus-tcp.so",
												"description": "description",
												"description_zh": "描述",
												"schema": "modbus-tcp"
											}, {
												"kind": 1,
												"node_type": 2,
												"name": "MQTT",
												"library": "libplugin-mqtt.so",
												"description": "Neuron northbound MQTT plugin bases on NanoSDK.",
												"description_zh": "基于 NanoSDK 的 Neuron 北向应用 MQTT 插件",
												"schema": "mqtt"
											}]
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/schema": {
			"get": {
				"summary": "Get Plugin Schema",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [{
					"name": "schema_name",
					"in": "query",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"tag_regex": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"type": {
														"type": "integer"
													},
													"regex": {
														"type": "string"
													}
												},
												"required": ["type", "regex"]
											}
										},
										"group_interval": {
											"type": "integer"
										},
										"connection_mode": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"name_zh": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"description_zh": {
													"type": "string"
												},
												"attribute": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"default": {
													"type": "integer"
												},
												"valid": {
													"type": "object",
													"properties": {
														"map": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"key": {
																		"type": "string"
																	},
																	"value": {
																		"type": "integer"
																	}
																},
																"required": ["key", "value"]
															}
														}
													},
													"required": ["map"]
												}
											},
											"required": ["name", "name_zh", "description", "description_zh", "attribute", "type", "default", "valid"]
										},
										"interval": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"name_zh": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"description_zh": {
													"type": "string"
												},
												"attribute": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"default": {
													"type": "integer"
												},
												"valid": {
													"type": "object",
													"properties": {
														"min": {
															"type": "integer"
														},
														"max": {
															"type": "integer"
														}
													},
													"required": ["min", "max"]
												}
											},
											"required": ["name", "name_zh", "description", "description_zh", "attribute", "type", "default", "valid"]
										},
										"host": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"name_zh": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"description_zh": {
													"type": "string"
												},
												"attribute": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"valid": {
													"type": "object",
													"properties": {
														"regex": {
															"type": "string"
														},
														"length": {
															"type": "integer"
														}
													},
													"required": ["regex", "length"]
												}
											},
											"required": ["name", "name_zh", "description", "description_zh", "attribute", "type", "valid"]
										},
										"port": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"name_zh": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"description_zh": {
													"type": "string"
												},
												"attribute": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"default": {
													"type": "integer"
												},
												"valid": {
													"type": "object",
													"properties": {
														"min": {
															"type": "integer"
														},
														"max": {
															"type": "integer"
														}
													},
													"required": ["min", "max"]
												}
											},
											"required": ["name", "name_zh", "description", "description_zh", "attribute", "type", "default", "valid"]
										},
										"timeout": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"name_zh": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"description_zh": {
													"type": "string"
												},
												"attribute": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"default": {
													"type": "integer"
												},
												"valid": {
													"type": "object",
													"properties": {
														"min": {
															"type": "integer"
														},
														"max": {
															"type": "integer"
														}
													},
													"required": ["min", "max"]
												}
											},
											"required": ["name", "name_zh", "description", "description_zh", "attribute", "type", "default", "valid"]
										}
									},
									"required": ["tag_regex", "group_interval", "connection_mode", "interval", "host", "port", "timeout"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"tag_regex": [{
												"type": 3,
												"regex": "^[0-9]+![3-4][0-9]+(#B|#L|)$"
											}, {
												"type": 4,
												"regex": "^[0-9]+![3-4][0-9]+(#B|#L|)$"
											}, {
												"type": 5,
												"regex": "^[0-9]+![3-4][0-9]+(#BB|#BL|#LL|#LB|)$"
											}, {
												"type": 6,
												"regex": "^[0-9]+![3-4][0-9]+(#BB|#BL|#LL|#LB|)$"
											}, {
												"type": 7,
												"regex": "^[0-9]+![3-4][0-9]+(#B|#L|)$"
											}, {
												"type": 8,
												"regex": "^[0-9]+![3-4][0-9]+(#B|#L|)$"
											}, {
												"type": 9,
												"regex": "^[0-9]+![3-4][0-9]+(#BB|#BL|#LL|#LB|)$"
											}, {
												"type": 10,
												"regex": "^[0-9]+![3-4][0-9]+(#B|#L|)$"
											}, {
												"type": 11,
												"regex": "^[0-9]+!([0-1][0-9]+|[3-4][0-9]+\\.([0-9]|[0-1][0-5]))$"
											}, {
												"type": 13,
												"regex": "^[0-9]+![3-4][0-9]+\\.[0-9]+(H|L|)$"
											}],
											"group_interval": 1000,
											"connection_mode": {
												"name": "Connection Mode",
												"name_zh": "连接模式",
												"description": "Neuron as the client, or as the server",
												"description_zh": "Neuron 作为客户端或服务端",
												"attribute": "required",
												"type": "map",
												"default": 0,
												"valid": {
													"map": [{
														"key": "Client",
														"value": 0
													}, {
														"key": "Server",
														"value": 1
													}]
												}
											},
											"interval": {
												"name": "Send Interval",
												"name_zh": "指令发送间隔",
												"description": "Send reading instruction interval(ms)",
												"description_zh": "发送读指令时间间隔，单位为毫秒",
												"attribute": "required",
												"type": "int",
												"default": 20,
												"valid": {
													"min": 0,
													"max": 3000
												}
											},
											"host": {
												"name": "IP Address",
												"name_zh": "IP地址",
												"description": "Local IP in server mode, remote device IP in client mode",
												"description_zh": "服务端模式中填写本地 IP，客户端模式中填写目标设备 IP",
												"attribute": "required",
												"type": "string",
												"valid": {
													"regex": "/^((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)$/",
													"length": 30
												}
											},
											"port": {
												"name": "Port",
												"name_zh": "端口号",
												"description": "Local port in server mode, remote device port in client mode",
												"description_zh": "服务端模式中填写本地端口号，客户端模式中填写远程设备端口号",
												"attribute": "required",
												"type": "int",
												"default": 502,
												"valid": {
													"min": 1,
													"max": 65535
												}
											},
											"timeout": {
												"name": "Connection Timeout",
												"name_zh": "连接超时时间",
												"description": "Connection timeout(ms)",
												"description_zh": "连接超时时间，单位为毫秒",
												"attribute": "required",
												"type": "int",
												"default": 3000,
												"valid": {
													"min": 1000,
													"max": 65535
												}
											}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/subscribe": {
			"post": {
				"summary": "Subscribe",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"app": {
										"description": "app name",
										"type": "string"
									},
									"driver": {
										"description": "substring match against driver name",
										"type": "string"
									},
									"group": {
										"description": "substring match against group name",
										"type": "string"
									},
									"params": {
										"type": "object",
										"properties": {
											"topic": {
												"description": "optional, when using the MQTT plugin, the topic field needs to be added",
												"type": "string"
											}
										},
										"description": "when using the MQTT plugin, the topic field needs to be added"
									}
								},
								"required": ["app", "driver", "group"]
							},
							"example": {
								"app": "mqtt",
								"driver": "modbus-tcp",
								"group": "group-1",
								"params": {
									"topic": "/neuron/mqtt/group-1"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "group not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "group not exist",
										"value": {
											"error": 2106
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"put": {
				"summary": "Update Subscribe Parameters",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"app": {
										"description": "app name",
										"type": "string"
									},
									"driver": {
										"description": "deliver name",
										"type": "string"
									},
									"group": {
										"type": "string",
										"description": "driver node group name"
									},
									"params": {
										"type": "object",
										"properties": {
											"topic": {
												"type": "string",
												"description": "when using the MQTT plugin, the topic key is the upload topic"
											}
										},
										"required": ["topic"]
									}
								},
								"required": ["app", "driver", "group", "params"]
							},
							"example": ""
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "group not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "group not exist",
										"value": {
											"error": 2106
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "UnSubscribe",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"app": {
										"description": "app name",
										"type": "string"
									},
									"driver": {
										"description": "driver  name",
										"type": "string"
									},
									"group": {
										"description": "driver node group name",
										"type": "string"
									},
									"params": {
										"type": "object",
										"properties": {
											"topic": {
												"description": "optional, when using the MQTT plugin, the topic field needs to be added",
												"type": "string"
											}
										},
										"required": ["topic"],
										"description": "optional, when using the MQTT plugin, the topic field needs to be added"
									}
								},
								"required": ["app", "driver", "group", "params"]
							},
							"example": {
								"app": "mqtt",
								"driver": "modbus-tcp",
								"group": "group-1",
								"params": {
									"topic": "/neuron/mqtt/group-1"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "group not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "group not exist",
										"value": {
											"error": 2106
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Get Subscribe Group",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [{
					"name": "app",
					"in": "query",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"groups": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"driver": {
														"description": "deliver name",
														"type": "string"
													},
													"group": {
														"description": "group name",
														"type": "string"
													},
													"params": {
														"type": "object",
														"properties": {
															"topic": {
																"type": "string"
															}
														},
														"required": ["topic"],
														"description": "when using the MQTT plugin, the topic field needs to be added"
													}
												},
												"required": ["driver", "group", "params"]
											}
										}
									},
									"required": ["groups"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"groups": [{
												"driver": "modbus-tcp",
												"group": "group-1",
												"params": {
													"topic": "/neuron/mqtt/group-1"
												}
											}, {
												"driver": "modbus-tcp",
												"group": "group-2",
												"params": {
													"topic": "/neuron/mqtt/group-2"
												}
											}]
										}
									}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "Incorrect request",
						"content": {
							"application/json": {
								"schema": {
									"type": "null"
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/subscribes": {
			"post": {
				"summary": "Subscribe Multiple Groups",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"app": {
										"type": "string",
										"description": "app n"
									},
									"groups": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"driver": {
													"description": "deliver name",
													"type": "string"
												},
												"group": {
													"description": "group name",
													"type": "string"
												},
												"params": {
													"type": "object",
													"properties": {
														"topic": {
															"description": "when using the MQTT plugin, the topic key is the upload topoic",
															"type": "string"
														}
													},
													"required": ["topic"],
													"description": "optional, depends on plugins"
												}
											},
											"required": ["driver", "group", "params"]
										}
									}
								},
								"required": ["app", "groups"]
							},
							"example": {
								"app": "mqtt",
								"groups": [{
									"driver": "modbus1",
									"group": "group1",
									"params": {
										"topic": "/neuron/mqtt/modbus1/group1"
									}
								}, {
									"driver": "modbus2",
									"group": "group2",
									"params": {
										"topic": "/neuron/mqtt/modbus2/group2"
									}
								}]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "suceess",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "404",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "group not exist",
										"value": {
											"error": 2106
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/version": {
			"get": {
				"summary": "Get Version",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"build_date": {
											"type": "string"
										},
										"revision": {
											"description": "dirty indicates uncommit changes",
											"type": "string"
										},
										"version": {
											"type": "string"
										}
									},
									"required": ["build_date", "revision", "version"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"build_date": "2022-06-01",
											"revision": "99e2184+dirty",
											"version": "2.4.0"
										}
									}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "internal error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "internal error",
										"value": {
											"error": 1001
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/logs": {
			"get": {
				"summary": "Download log files",
				"deprecated": false,
				"description": "",
				"tags": ["configuration"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "Record does not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "file not exist",
										"value": {
											"error": 1011
										}
									},
									"2": {
										"summary": "command execution failed",
										"value": {
											"error": 1014
										}
									}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "internal error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "internal error",
										"value": {
											"error": 1001
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/log/level": {
			"put": {
				"summary": "Update node log level",
				"deprecated": false,
				"description": "Call the api to modify the log level of the node to debug, and automatically switch to the default level in about ten minutes.",
				"tags": ["configuration"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"node": {
										"type": "string",
										"description": "node name"
									},
									"level": {
										"type": "string",
										"description": "log level ,could be debug、info、notice、warn、error、fatal"
									},
									"core": {
										"type": "string",
										"description": "whether to switch the core log level.The core field is optional and defaults to true."
									}
								},
								"required": ["level"]
							},
							"example": ""
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					},
					"404": {
						"description": "Record does not exist",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "node not exist",
										"value": {
											"error": 2003
										}
									}
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "server is busy",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "server is busy",
										"value": {
											"error": 1010
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/metrics": {
			"get": {
				"summary": "Get Metrics",
				"deprecated": false,
				"description": "",
				"tags": ["metrics"],
				"parameters": [{
					"name": "category",
					"in": "query",
					"description": "one of `global`, `driver` and `app`",
					"required": false,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "node",
					"in": "query",
					"description": "filter with node name, only meaningful when `category=driver` or `category=app`",
					"required": false,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": "# HELP core_dumped Whether there is any core dump\n# TYPE core_dumped gauge\ncore_dumped 0\n# HELP uptime_seconds Uptime in seconds\n# TYPE uptime_seconds counter\nuptime_seconds 314\n# HELP north_nodes_total Number of north nodes\n# TYPE north_nodes_total gauge\nnorth_nodes_total 1\n# HELP north_running_nodes_total Number of north nodes in running state\n# TYPE north_running_nodes_total gauge\nnorth_running_nodes_total 1\n# HELP north_disconnected_nodes_total Number of north nodes disconnected\n# TYPE north_disconnected_nodes_total gauge\nnorth_disconnected_nodes_total 1\n# HELP south_nodes_total Number of south nodes\n# TYPE south_nodes_total gauge\nsouth_nodes_total 1\n# HELP south_running_nodes_total Number of south nodes in running state\n# TYPE south_running_nodes_total gauge\nsouth_running_nodes_total 0\n# HELP south_disconnected_nodes_total Number of south nodes disconnected\n# TYPE south_disconnected_nodes_total gauge\nsouth_disconnected_nodes_total 1\n# HELP send_msgs_total Total number of messages sent\n# TYPE send_msgs_total counter\nsend_msgs_total{node=\"data-stream-processing\"} 0\n# HELP send_msg_errors_total Total number of errors sending messages\n# TYPE send_msg_errors_total counter\nsend_msg_errors_total{node=\"data-stream-processing\"} 0\n# HELP recv_msgs_total Total number of messages received\n# TYPE recv_msgs_total counter\nrecv_msgs_total{node=\"data-stream-processing\"} 0\n# HELP last_rtt_ms Last request round trip time in milliseconds\n# TYPE last_rtt_ms gauge\nlast_rtt_ms{node=\"modbus\"} 9999\n# HELP send_bytes Total number of bytes sent\n# TYPE send_bytes gauge\nsend_bytes{node=\"modbus\"} 0\n# HELP recv_bytes Total number of bytes received\n# TYPE recv_bytes gauge\nrecv_bytes{node=\"modbus\"} 0\n# HELP tag_reads_total Total number of tag reads including errors\n# TYPE tag_reads_total counter\ntag_reads_total{node=\"modbus\"} 0\n# HELP tag_read_errors_total Total number of tag read errors\n# TYPE tag_read_errors_total counter\ntag_read_errors_total{node=\"modbus\"} 0\n# HELP group_tags_total Total number of tags in the group\n# TYPE group_tags_total gauge\ngroup_tags_total{node=\"modbus\",group=\"grp\"} 1\n# HELP group_last_send_msgs Number of messages sent on last group timer invocation\n# TYPE group_last_send_msgs gauge\ngroup_last_send_msgs{node=\"modbus\",group=\"grp\"} 0\n# HELP group_last_timer_ms Time in milliseconds consumed on last group timer invocation\n# TYPE group_last_timer_ms gauge\ngroup_last_timer_ms{node=\"modbus\",group=\"grp\"} 0"
									}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "null"
								}
							}
						},
						"headers": {}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "null"
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/read": {
			"post": {
				"summary": "Read Tag",
				"deprecated": false,
				"description": "",
				"tags": ["rw"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"node": {
										"type": "string",
										"description": "node name"
									},
									"group": {
										"type": "string",
										"description": "group name"
									},
									"sync": {
										"type": "boolean",
										"description": "synchronous read ,default false"
									},
									"query": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string",
												"description": "tag name substring match "
											},
											"description": {
												"type": "string",
												"description": "tag description substring match"
											}
										}
									}
								},
								"required": ["node", "group"]
							},
							"example": {
								"node": "modbus-tcp-1",
								"group": "config_modbus_tcp_sample_2",
								"sync": false,
								"query": {
									"name": "data",
									"description": "switch"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"tags": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"name": {
														"description": "tag name",
														"type": "string"
													},
													"value": {
														"type": ["integer", "boolean"],
														"description": "tag  value"
													},
													"error": {
														"type": "integer"
													}
												},
												"required": ["name", "value"]
											}
										}
									},
									"required": ["tags"],
									"description": "The value is displayed only when the value is read correctly, when the value is read incorrectly, the error code is displayed, not the value."
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"tags": [{
												"name": "data1",
												"value": 1
											}, {
												"name": "data2",
												"error": 2014
											}, {
												"name": "data3",
												"value": true
											}]
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/read/paginate": {
			"post": {
				"summary": "Read Tag (pagination)",
				"deprecated": false,
				"description": "",
				"tags": ["rw"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"node": {
										"description": "node name",
										"type": "string"
									},
									"group": {
										"type": "string",
										"description": "group name"
									},
									"sync": {
										"type": "boolean",
										"description": "synchronous read ,default false"
									},
									"name": {
										"type": "string",
										"description": "tag name substring match"
									},
									"description": {
										"type": "string",
										"description": "tag description substring match"
									},
									"currentPage": {
										"type": "integer",
										"description": "current page "
									},
									"pageSize": {
										"type": "integer",
										"description": "number of tags per page"
									},
									"isError": {
										"type": "boolean",
										"description": "response error tags only"
									}
								},
								"required": ["node", "group", "currentPage", "pageSize", "isError"]
							},
							"example": {
								"node": "modbus-tcp-1",
								"group": "config_modbus_tcp_sample_2",
								"sync": false,
								"query": {
									"name": "data",
									"description": "switch",
									"currentPage": 1,
									"pageSize": 10,
									"isError": true
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"meta": {
											"type": "object",
											"properties": {
												"currentPage": {
													"type": "integer"
												},
												"pageSize": {
													"type": "integer"
												},
												"total": {
													"type": "integer"
												}
											},
											"required": ["currentPage", "pageSize", "total"]
										},
										"items": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"name": {
														"type": "string"
													},
													"type": {
														"type": "integer"
													},
													"address": {
														"type": "string"
													},
													"attribute": {
														"type": "integer"
													},
													"description": {
														"type": "string"
													},
													"precison": {
														"type": "integer"
													},
													"decimal": {
														"type": "integer"
													},
													"bias": {
														"type": "integer"
													},
													"value": {
														"type": "integer"
													}
												}
											}
										}
									},
									"required": ["meta", "items"],
									"description": "The value is displayed only when the value is read correctly, when the value is read incorrectly, the error code is displayed, not the value."
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"meta": {
												"currentPage": 1,
												"pageSize": 10,
												"total": 1
											},
											"items": [{
												"name": "tag1",
												"type": 4,
												"address": "1!400001",
												"attribute": 8,
												"description": "",
												"precison": 0,
												"decimal": 0,
												"bias": 0,
												"value": 123
											}]
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/write": {
			"post": {
				"summary": "Write One Tag",
				"deprecated": false,
				"description": "",
				"tags": ["rw"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"node": {
										"type": "string"
									},
									"group": {
										"type": "string"
									},
									"tag": {
										"type": "string"
									},
									"value": {
										"type": "integer"
									}
								},
								"required": ["node", "group", "tag", "value"]
							},
							"example": {
								"node": "modbus-tcp-1",
								"group": "config_modbus_tcp_sample_2",
								"tag": "tag1",
								"value": 1234
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/neuron-0"
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/write/tags": {
			"post": {
				"summary": "Write Multiple Tags",
				"deprecated": false,
				"description": "Multiple tags writing currently only supports Mitsubishi 3E, Beckhoff ADS, Modbus TCP, Modbus RTU, Siemens S7 ISOTCP, Omron FINS TCP, OPC UA, BACnet/IP drivers.",
				"tags": ["rw"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"node": {
										"type": "string"
									},
									"group": {
										"type": "string"
									},
									"tags": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"tag": {
													"type": "string"
												},
												"value": {
													"type": ["integer", "string"]
												}
											},
											"required": ["tag", "value"]
										}
									}
								},
								"required": ["node", "group", "tags"],
								"description": "Multiple tags writing currently only supports Mitsubishi 3E, Beckhoff ADS, Modbus TCP, Modbus RTU, Siemens S7 ISOTCP, Omron FINS TCP, OPC UA, BACnet/IP drivers."
							},
							"example": {
								"node": "modbus-tcp-1",
								"group": "group1",
								"tags": [{
									"tag": "tag1",
									"value": 123
								}, {
									"tag": "tag2",
									"value": 1233
								}, {
									"tag": "tag3",
									"value": 7788
								}, {
									"tag": "tag4",
									"value": 1
								}, {
									"tag": "tag5",
									"value": "asdfda"
								}]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/neuron-error"
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"error": 0
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/neuron/read/test": {
			"post": {
				"summary": "TEST Reading Tag",
				"deprecated": false,
				"description": "",
				"tags": ["rw"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"driver": {
										"type": "string"
									},
									"group": {
										"type": "string"
									},
									"tag": {
										"type": "string"
									},
									"address": {
										"type": "string"
									},
									"attribute": {
										"type": "integer",
										"description": "Reference https://docs.emqx.com/en/neuronex/latest/api/data-type.html#tag-attributes"
									},
									"type": {
										"type": "integer",
										"description": "Reference https://docs.emqx.com/en/neuronex/latest/api/data-type.html#data-types"
									},
									"precision": {
										"type": "integer"
									},
									"decimal": {
										"type": "integer"
									},
									"bias": {
										"type": "integer"
									}
								},
								"required": ["driver", "group", "tag", "address", "attribute", "type", "precision", "decimal", "bias"],
								"description": "Only perform reading tests, no need to actually add the tag. Not compatible with tag and node byte order, does not calculate decimal and offset."
							},
							"example": {
								"driver": "1",
								"group": "1",
								"tag": "tag1",
								"address": "1!400002",
								"attribute": 8,
								"type": 3,
								"precision": 0,
								"decimal": 0,
								"bias": 0
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"value": {
											"type": "integer"
										}
									},
									"required": ["value"]
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"value": 29540
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/metadata/sources/yaml/{name}": {
			"get": {
				"summary": "List all configKey",
				"deprecated": false,
				"description": "This API is used to get all Config Keys under a specific source name.\n\nNote: When retrieving Config Keys, if the properties contain a password field (case-insensitive, such as Password), the API will not return the actual password value, but instead replace it with \"******\" to conceal the password information.",
				"tags": ["configKey"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "Source name, supports built-in sources and extended sources. The built-in sources include mqtt, redis, neuron, memory, httppull, httppush, file, edgex,\n Extended sources include random, sql, video, zmq and user-defined sources",
					"required": true,
					"example": "mqtt",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"amd_broker": {
											"type": "object",
											"properties": {
												"insecureSkipVerify": {
													"type": "boolean"
												},
												"protocolVersion": {
													"type": "string"
												},
												"qos": {
													"type": "integer"
												},
												"server": {
													"type": "string"
												},
												"password": {
													"type": "string"
												}
											},
											"required": ["insecureSkipVerify", "protocolVersion", "qos", "server", "password"]
										},
										"default": {
											"type": "object",
											"properties": {
												"qos": {
													"type": "integer"
												},
												"server": {
													"type": "string"
												}
											},
											"required": ["qos", "server"]
										},
										"demo_conf": {
											"type": "object",
											"properties": {
												"qos": {
													"type": "integer"
												},
												"server": {
													"type": "string"
												}
											},
											"required": ["qos", "server"]
										}
									},
									"required": ["amd_broker", "default", "demo_conf"],
									"description": "Note: When retrieving Config Keys, if the properties contain a password field (case-insensitive, such as Password), the API will not return the actual password value, but instead replace it with \"******\" to conceal the password information."
								},
								"examples": {
									"1": {
										"summary": "curl  /metadata/sources/yaml/mqtt",
										"value": {
											"amd_broker": {
												"insecureSkipVerify": false,
												"protocolVersion": "3.1.1",
												"qos": 1,
												"server": "tcp://122.9.166.75:1883",
												"password": "******"
											},
											"default": {
												"qos": 2,
												"server": "tcp://emqx:1883"
											},
											"demo_conf": {
												"qos": 0,
												"server": "tcp://10.211.55.6:1883"
											}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/metadata/sources/{name}/confKeys/{confKey}": {
			"delete": {
				"summary": "Delete a configKey",
				"deprecated": false,
				"description": "This API is used to delete a Config Key configuration under a specific source name",
				"tags": ["configKey"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "Source name, supports built-in sources and extended sources. The built-in sources include mqtt, redis, neuron, memory, httppull, httppush, file, edgex,\nExtended sources include random, sql, video, zmq and user-defined sources",
					"required": true,
					"example": "mqtt",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "confKey",
					"in": "path",
					"description": "Config Key Name。Taking the above as an example, the Config Keys are amd_broker, default, demo_conf in sequence.",
					"required": true,
					"example": "demo_conf",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "null"
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"put": {
				"summary": "Register a Config Key",
				"deprecated": false,
				"description": "This API is used to register a Config Key under a specific source name",
				"tags": ["configKey"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "Source name, supports built-in sources and extended sources. The built-in sources include mqtt, redis, neuron, memory, httppull, httppush, file, edgex, Extended sources include random, sql, video, zmq and user-defined sources",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "confKey",
					"in": "path",
					"description": "Config Key name to register",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"description": "supports built-in sources and extended sources. The built-in sources include mqtt, redis, neuron, memory, httppull, httppush, file, edgex, Extended sources include random, sql, video, zmq and user-defined sources",
										"title": "Source name"
									},
									"confKey": {
										"type": "string",
										"title": "Config Key name to register"
									}
								},
								"required": ["confKey", "name"]
							},
							"example": ""
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"demo_conf": {
											"type": "object",
											"properties": {
												"qos": {
													"type": "integer"
												},
												"server": {
													"type": "string"
												}
											},
											"required": ["qos", "server"]
										}
									},
									"required": ["demo_conf"]
								},
								"examples": {
									"1": {
										"summary": "Register the Config Key named demo_conf under the MQTT source",
										"value": {
											"demo_conf": {
												"qos": 0,
												"server": "tcp://10.211.55.6:1883"
											}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/configs": {
			"patch": {
				"summary": "Reload Basic Configs",
				"deprecated": false,
				"description": "By dynamically reloading configuration, parameters such as debug and timezone can be updated for running eKuiper without restarting the application.\nCurrent supported dynamic reloadable parameters:\n\n- `debug`\n- `consoleLog`\n- `fileLog`\n- `timezone`",
				"tags": ["configs"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"debug": {
										"type": "boolean"
									},
									"consoleLog": {
										"type": "boolean"
									},
									"fileLog": {
										"type": "boolean"
									},
									"timezone": {
										"type": "string"
									}
								}
							},
							"example": {
								"debug": true,
								"consoleLog": true,
								"fileLog": true,
								"timezone": "UTC"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "null"
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/stop": {
			"post": {
				"summary": "Shutdown eKuiper",
				"deprecated": false,
				"description": "Shut down eKuiper through rest api.",
				"tags": ["configs"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/data/import": {
			"post": {
				"summary": "Import Data",
				"deprecated": false,
				"description": "The API resets all existing data and then imports the new data into the system by default. But user can specify ``partial=1`` parameter in HTTP URL to keep the existing data and apply the new data.\nThe API supports specifying data by means of text content or file URIs.\n\n\n\nExample 1: Import by text content\n\n```shell\nPOST http://{{host}}/data/import\nContent-Type: application/json\n\n{\n  \"content\": \"{json of the ruleset}\"\n}\n```\n\nExample 2: Import by file URI\n\n```shell\nPOST http://{{host}}/data/import\nContent-Type: application/json\n\n{\n  \"file\": \"file:///tmp/a.json\"\n}\n```\n\nExample 3: Import data via file URI and exit (for plug-ins and static schema updates, users need to ensure that eKuiper can be restarted after exiting)\n\n```shell\nPOST http://{{host}}/data/import?stop=1\nContent-Type: application/json\n\n{\n  \"file\": \"file:///tmp/a.json\"\n}\n```\n\nExample 4: Keep the old data and import new data (overwrite the tables/streams/rules/source config/sink config. install plugins/schema if not exist, else ignore them)\n\n```shell\nPOST http://{{host}}/data/import?partial=1\nContent-Type: application/json\n\n{\n  \"file\": \"file:///tmp/a.json\"\n}\n```\n\n## \n\n## Data Format\n\nThe file format for importing and exporting data is JSON, which can contain : `streams`, `tables`, `rules`, `plugin`, `source yaml` and so on. Each type holds the the key-value pair of the name and the creation statement. In the following example file, we define stream 、rules、table、plugin、source config、sink config\n\n\n```shell \n{\n    \"streams\": {\n        \"demo\": \"CREATE STREAM demo () WITH (DATASOURCE=\\\"users\\\", FORMAT=\\\"JSON\\\")\"\n    },\n    \"tables\": {\n      \"T110\":\"\\n CREATE TABLE T110\\n (\\n S1 string\\n )\\n WITH (DATASOURCE=\\\"test.json\\\", FORMAT=\\\"json\\\", TYPE=\\\"file\\\", KIND=\\\"scan\\\", );\\n \"\n    },\n    \"rules\": {\n        \"rule1\": \"{\\\"id\\\": \\\"rule1\\\",\\\"sql\\\": \\\"SELECT * FROM demo\\\",\\\"actions\\\": [{\\\"log\\\": {}}]}\",\n        \"rule2\": \"{\\\"id\\\": \\\"rule2\\\",\\\"sql\\\": \\\"SELECT * FROM demo\\\",\\\"actions\\\": [{  \\\"log\\\": {}}]}\"\n    },\n    \"nativePlugins\":{\n        \"functions_image\":\"{\\\"name\\\":\\\"image\\\",\\\"file\\\":\\\"https://packages.emqx.net/kuiper-plugins/1.8.1/debian/functions/image_amd64.zip\\\",\\\"shellParas\\\":[]}\",\n        \"sources_video\":\"{\\\"name\\\":\\\"video\\\",\\\"file\\\":\\\"https://packages.emqx.net/kuiper-plugins/1.8.1/debian/sources/video_amd64.zip\\\",\\\"shellParas\\\":[]}\"\n    },\n    \"portablePlugins\":{\n    },\n    \"sourceConfig\":{\n      \"mqtt\":\"{\\\"td\\\":{\\\"insecureSkipVerify\\\":false,\\\"password\\\":\\\"public\\\",\\\"protocolVersion\\\":\\\"3.1.1\\\",\\\"qos\\\":1,\\\"server\\\":\\\"tcp://broker.emqx.io:1883\\\",\\\"username\\\":\\\"admin\\\"},\\\"test\\\":{\\\"insecureSkipVerify\\\":false,\\\"password\\\":\\\"public\\\",\\\"protocolVersion\\\":\\\"3.1.1\\\",\\\"qos\\\":1,\\\"server\\\":\\\"tcp://127.0.0.1:1883\\\",\\\"username\\\":\\\"admin\\\"}}\"\n    },\n    \"sinkConfig\":{\n      \"edgex\":\"{\\\"test\\\":{\\\"bufferLength\\\":1024,\\\"contentType\\\":\\\"application/json\\\",\\\"enableCache\\\":false,\\\"format\\\":\\\"json\\\",\\\"messageType\\\":\\\"event\\\",\\\"omitIfEmpty\\\":false,\\\"port\\\":6379,\\\"protocol\\\":\\\"redis\\\",\\\"sendSingle\\\":true,\\\"server\\\":\\\"localhost\\\",\\\"topic\\\":\\\"application\\\",\\\"type\\\":\\\"redis\\\"}}\"\n    },\n    \"connectionConfig\":{\n    },\n    \"Service\":{\n    },\n    \"Schema\":{\n    },\n    \"uploads\":{\n    }\n}\n```",
				"tags": ["data"],
				"parameters": [{
					"name": "stop",
					"in": "query",
					"description": "for plug-ins and static schema updates, users need to ensure that eKuiper can be restarted after exiting",
					"required": false,
					"example": 1,
					"schema": {
						"type": "integer"
					}
				}, {
					"name": "partial",
					"in": "query",
					"description": "Keep the old data and import new data (overwrite the tables/streams/rules/source config/sink config. install plugins/schema if not exist, else ignore them)",
					"required": false,
					"example": 1,
					"schema": {
						"type": "integer"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"content": {
										"type": "string",
										"title": "text content"
									},
									"file": {
										"type": "string",
										"title": " file URI"
									}
								}
							},
							"example": {
								"content": "{json of the ruleset}"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"ErrorMsg": {
											"type": "string"
										},
										"ConfigResponse": {
											"type": "object",
											"properties": {
												"streams": {
													"type": "object",
													"properties": {}
												},
												"tables": {
													"type": "object",
													"properties": {}
												},
												"rules": {
													"type": "object",
													"properties": {}
												},
												"nativePlugins": {
													"type": "object",
													"properties": {}
												},
												"portablePlugins": {
													"type": "object",
													"properties": {}
												},
												"sourceConfig": {
													"type": "object",
													"properties": {}
												},
												"sinkConfig": {
													"type": "object",
													"properties": {}
												},
												"connectionConfig": {
													"type": "object",
													"properties": {}
												},
												"Service": {
													"type": "object",
													"properties": {}
												},
												"Schema": {
													"type": "object",
													"properties": {}
												}
											},
											"required": ["streams", "tables", "rules", "nativePlugins", "portablePlugins", "sourceConfig", "sinkConfig", "connectionConfig", "Service", "Schema"]
										}
									},
									"required": ["ErrorMsg", "ConfigResponse"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"ErrorMsg": "",
											"ConfigResponse": {
												"streams": {},
												"tables": {},
												"rules": {},
												"nativePlugins": {},
												"portablePlugins": {},
												"sourceConfig": {},
												"sinkConfig": {},
												"connectionConfig": {},
												"Service": {},
												"Schema": {}
											}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/data/import/status": {
			"get": {
				"summary": "Import data status",
				"deprecated": false,
				"description": "This API returns data import errors. If all returns are empty, it means that the import is completely successful.",
				"tags": ["data"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"streams": {
											"type": "object",
											"properties": {}
										},
										"tables": {
											"type": "object",
											"properties": {}
										},
										"rules": {
											"type": "object",
											"properties": {}
										},
										"nativePlugins": {
											"type": "object",
											"properties": {}
										},
										"portablePlugins": {
											"type": "object",
											"properties": {}
										},
										"sourceConfig": {
											"type": "object",
											"properties": {}
										},
										"sinkConfig": {
											"type": "object",
											"properties": {}
										},
										"connectionConfig": {
											"type": "object",
											"properties": {}
										},
										"Service": {
											"type": "object",
											"properties": {}
										},
										"Schema": {
											"type": "object",
											"properties": {}
										},
										"uploads": {
											"type": "object",
											"properties": {}
										}
									},
									"required": ["streams", "tables", "rules", "nativePlugins", "portablePlugins", "sourceConfig", "sinkConfig", "connectionConfig", "Service", "Schema", "uploads"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"streams": {},
											"tables": {},
											"rules": {},
											"nativePlugins": {},
											"portablePlugins": {},
											"sourceConfig": {},
											"sinkConfig": {},
											"connectionConfig": {},
											"Service": {},
											"Schema": {},
											"uploads": {}
										}
									},
									"2": {
										"summary": "Failed to import plugin",
										"value": {
											"streams": {},
											"tables": {},
											"rules": {},
											"nativePlugins": {
												"sinks_tdengine": "fail to download file file:///root/ekuiper-jran/_plugins/ubuntu/sinks/tdengine_amd64.zip: stat /root/ekuiper-jran/_plugins/ubuntu/sinks/tdengine_amd64.zip: no such file or directory",
												"sources_random": "fail to download file file:///root/ekuiper-jran/_plugins/ubuntu/sources/random_amd64.zip: stat /root/ekuiper-jran/_plugins/ubuntu/sources/random_amd64.zip: no such file or directory"
											},
											"portablePlugins": {},
											"sourceConfig": {},
											"sinkConfig": {},
											"connectionConfig": {},
											"Service": {},
											"Schema": {},
											"uploads": {}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/data/export": {
			"get": {
				"summary": "Export all data",
				"deprecated": false,
				"description": "Export all data,The export API returns a file to download.",
				"tags": ["data"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"streams": {},
											"tables": {},
											"rules": {},
											"nativePlugins": {},
											"portablePlugins": {},
											"sourceConfig": {},
											"sinkConfig": {},
											"connectionConfig": {},
											"Service": {},
											"Schema": {}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"post": {
				"summary": "Export specific rules related data",
				"deprecated": false,
				"description": "Export specific rules related data,The export API returns a file to download.",
				"tags": ["data"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/x-www-form-urlencoded": {
							"schema": {
								"type": "object",
								"properties": {
									"[\"rule1\",\"rule2\"]": {
										"example": "",
										"type": "string"
									}
								},
								"required": ["[\"rule1\",\"rule2\"]"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"streams": {
											"type": "object",
											"properties": {}
										},
										"tables": {
											"type": "object",
											"properties": {}
										},
										"rules": {
											"type": "object",
											"properties": {}
										},
										"nativePlugins": {
											"type": "object",
											"properties": {}
										},
										"portablePlugins": {
											"type": "object",
											"properties": {}
										},
										"sourceConfig": {
											"type": "object",
											"properties": {}
										},
										"sinkConfig": {
											"type": "object",
											"properties": {}
										},
										"connectionConfig": {
											"type": "object",
											"properties": {}
										},
										"Service": {
											"type": "object",
											"properties": {}
										},
										"Schema": {
											"type": "object",
											"properties": {}
										}
									},
									"required": ["streams", "tables", "rules", "nativePlugins", "portablePlugins", "sourceConfig", "sinkConfig", "connectionConfig", "Service", "Schema"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"streams": {},
											"tables": {},
											"rules": {},
											"nativePlugins": {},
											"portablePlugins": {},
											"sourceConfig": {},
											"sinkConfig": {},
											"connectionConfig": {},
											"Service": {},
											"Schema": {}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/": {
			"get": {
				"summary": "Getting information",
				"deprecated": false,
				"description": "This API is used to get the version number, system type, and program running time.",
				"tags": ["overview"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"version": {
											"type": "string"
										},
										"os": {
											"type": "string"
										},
										"upTimeSeconds": {
											"type": "integer"
										}
									},
									"required": ["version", "os", "upTimeSeconds"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"version": "1.0.1-22-g119ee91",
											"os": "darwin",
											"upTimeSeconds": 14
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/ping": {
			"get": {
				"summary": "ping",
				"deprecated": false,
				"description": "",
				"tags": ["overview"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "null"
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/plugins/{type}": {
			"post": {
				"summary": "Create a plugin",
				"deprecated": false,
				"description": "The API accepts a JSON content to create a new plugin.The plugin is identified by the name. The name must be unique.\n\n### Parameters\n\n1. name: a unique name of the plugin. The name must be the same as the camel case version of the plugin with lowercase first letter. For example, if the exported plugin name is `Random`, then the name of this plugin is `random`.\n2. file: the url of the plugin files. The url can be `http` or `https` scheme or `file` scheme to refer to a local file path of the eKuiper server. It must be a zip file with: a compiled so file and the yaml file(only required for sources). If the plugin depends on some external dependencies, a bash script named install.sh can be provided to do the dependency installation. The name of the files must match the name of the plugin.\n\nA sample zip file for a source named random.zip\n\n1. Random@v1.0.0.so\n2. random.yaml\n3. install.sh\n4. Various dependency files/folders of install.sh\n   - mysdk.zip\n   - myconfig.conf\n5. etc directory: the runtime configuration files or dependency files. After installation, this directory will be\n   renamed to the plugin name under <span v-pre>{{eKuiperPath}}/etc/{{pluginType}}</span> directory.\n\nNotice that, the install.sh will be run that the system may already had the lib or package. Make sure to check the path before. Below is an example install.sh to install a sample sdk lib.\n\n\n```shell #!/bin/sh\ndir=/usr/local/mysdk\ncur=$(dirname \"$0\")\necho \"Base path $cur\"\nif [ -d \"$dir\" ]; then\n    echo \"SDK path $dir exists.\"\nelse\n    echo \"Creating SDK path $dir\"\n    mkdir -p $dir\n    echo \"Created SDK path $dir\"\nfi\n\napt install --no-upgrade unzip\nif [ -d \"$dir/lib\" ]; then\n    echo \"SDK lib path $dir/lib exists.\"\nelse\n    echo \"Unzip SDK lib to path $dir\"\n    unzip $cur/mysdk.zip -d $dir\n    echo \"Unzipped SDK lib to path $dir\"\nfi\n\nif [ -f \"/etc/ld.so.conf.d/myconfig.conf\" ]; then\n    echo \"/etc/ld.so.conf.d/myconfig.conf exists\"\nelse\n    echo \"Copy conf file\"\n    cp $cur/myconfig.conf /etc/ld.so.conf.d/\n    echo \"Copied conf file\"\nfi\nldconfig\necho \"Done\"\n```\n",
				"tags": ["plugins"],
				"parameters": [{
					"name": "type",
					"in": "path",
					"description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"file": {
										"type": "string",
										"description": "- Request Sample when the file locates in a http server\n\n  file:\"http://127.0.0.1/plugins/sources/random.zip\"\n\n- Request Sample for files locates in the same machine of the eKuiper server.\n\n  file:\"file:///var/plugins/sources/random.zip\""
									}
								},
								"required": ["name", "file"]
							},
							"example": {
								"name": "random",
								"file": "http://127.0.0.1/plugins/sources/random.zip"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"file": {
											"type": "string"
										}
									},
									"required": ["name", "file"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"name": "random",
											"file": "file:///var/plugins/sources/random.zip"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Show plugins",
				"deprecated": false,
				"description": "The API is used for displaying all of plugins defined in the server for a plugin type.",
				"tags": ["plugins"],
				"parameters": [{
					"name": "type",
					"in": "path",
					"description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": ["plugin1", "plugin2"]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/plugins/{type}/{name}": {
			"get": {
				"summary": "Describe a sources plugin",
				"deprecated": false,
				"description": "The API is used to print out the detailed definition of a plugin.",
				"tags": ["plugins"],
				"parameters": [{
					"name": "type",
					"in": "path",
					"description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "name",
					"in": "path",
					"description": "Path parameter `name` is the name of the plugin.",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"version": {
											"type": "string"
										}
									},
									"required": ["name", "version"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"name": "plugin1",
											"version": "1.0.0"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Drop a plugin",
				"deprecated": false,
				"description": "The API is used for drop the plugin. Notice that, for native plugins, the eKuiper server needs to be restarted to take effect. The current rules will continue to run with the deleted native plugins successfully. For portable plugin, the deletion will take effect immediately. The current rules which are using that plugin may encounter errors but won't stop and can continue running if an updated plugin with the same name is created later. If this is not expected, manually stop or delete those rules before deleting a plugin.\n\nThe user can pass a query parameter to decide if eKuiper should be stopped after a delete in order to make the deletion take effect. The parameter is `stop` and only when the value is `1` will the eKuiper be stopped. The user has to manually restart it.",
				"tags": ["plugins"],
				"parameters": [{
					"name": "type",
					"in": "path",
					"description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "stop",
					"in": "query",
					"description": "",
					"required": false,
					"example": "1",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"put": {
				"summary": "Update a sources plugin",
				"deprecated": false,
				"description": "Notice that, native plugins can be updated, but the new version will not take effect until the eKuiper server is\nrestarted.\nPortable plugins can be updated, and the new version will take effect immediately even for the running rules.\nThe request body is the same as the create plugin request.",
				"tags": ["plugins"],
				"parameters": [{
					"name": "type",
					"in": "path",
					"description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}, {
					"name": "name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/plugins/udfs": {
			"get": {
				"summary": "Show udfs",
				"deprecated": false,
				"description": "The API is used for displaying all user defined functions which are defined across all plugins.\n\nUnlike source and sink plugins, function plugin can export multiple functions at once. The exported names must be unique globally across all plugins. There will be a one to many mapping between function and its container plugin. Thus, we provide show udf(user defined function) api to query all user defined functions so that users can check the name duplication. And we provide describe udf api to find out the defined plugin of a function. We also provide the register functions api to register the udf list for an auto loaded plugin.\n",
				"tags": ["plugins"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": ["func1", "func2"]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/plugins/udfs/{name}": {
			"get": {
				"summary": "Describe an udf",
				"deprecated": false,
				"description": "The API is used to find out the plugin which defines the UDF. [APIs to handle function plugin with multiple functions](doc-3173101)",
				"tags": ["plugins"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"plugin": {
											"type": "string"
										}
									},
									"required": ["name", "plugin"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"name": "funcName",
											"plugin": "pluginName"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/plugins/functions/{plugin_name}/register": {
			"get": {
				"summary": "Register functions",
				"deprecated": false,
				"description": "The API aims to register all exported functions in an auto loaded function plugin or when the exported functions are changed. If the plugin was loaded by CLI create command or REST create API with functions property specified, then this is not needed. The register API will persist the functions list in the kv. Unless the exported functions are changed, users only need to register it once.\n[APIs to handle function plugin with multiple functions](doc-3173101)",
				"tags": ["plugins"],
				"parameters": [{
					"name": "plugin_name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"functions": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									},
									"required": ["functions"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"functions": ["func1", "func2"]
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/plugins/{type}/prebuild": {
			"get": {
				"summary": "Get the available plugins",
				"deprecated": false,
				"description": "According to the configuration `pluginHosts` in file `etc/kuiper.yaml` ,  it returns the plugins list that can be installed at local run eKuiper instance. By default, it get the list from `https://packages.emqx.net` .",
				"tags": ["plugins"],
				"parameters": [{
					"name": "type",
					"in": "path",
					"description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"file": {
										"type": "string"
									}
								},
								"required": ["name", "file"]
							},
							"example": ""
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"file": {
											"type": "string"
										}
									},
									"required": ["name", "file"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"file": "http://127.0.0.1:63767/kuiper-plugins/0.9.1/sinks/alpine/file_arm64.zip",
											"influx": "http://127.0.0.1:63767/kuiper-plugins/0.9.1/sinks/alpine/influx_arm64.zip",
											"zmq": "http://127.0.0.1:63768/kuiper-plugins/0.9.1/sinks/alpine/zmq_arm64.zip"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/rules": {
			"post": {
				"summary": "Create a rule",
				"deprecated": false,
				"description": "The API accepts a JSON content and create and start a rule.",
				"tags": ["rules"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"sql": {
										"type": "string"
									},
									"actions": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"log": {
													"type": "object",
													"properties": {}
												}
											}
										}
									}
								},
								"required": ["id", "sql", "actions"]
							},
							"example": {
								"id": "rule1",
								"sql": "SELECT * FROM demo",
								"actions": [{
									"log": {}
								}]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Show rules",
				"deprecated": false,
				"description": "The API is used for displaying all of rules defined in the server with a brief status.",
				"tags": ["rules"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string"
											},
											"status": {
												"type": "string"
											}
										},
										"required": ["id", "status"]
									}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": [{
											"id": "rule1",
											"status": "Running"
										}, {
											"id": "rule2",
											"status": "Stopped: canceled by error."
										}]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/rules/{id}": {
			"get": {
				"summary": "Describe a rule",
				"deprecated": false,
				"description": "The API is used for print the detailed definition of rule.",
				"tags": ["rules"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "id is the id or name of the rule.",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"sql": {
											"type": "string"
										},
										"actions": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"log": {
														"type": "object",
														"properties": {}
													},
													"mqtt": {
														"type": "object",
														"properties": {
															"server": {
																"type": "string"
															},
															"topic": {
																"type": "string"
															}
														},
														"required": ["server", "topic"]
													}
												}
											}
										}
									},
									"required": ["sql", "actions"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"sql": "SELECT * from demo",
											"actions": [{
												"log": {}
											}, {
												"mqtt": {
													"server": "tcp://127.0.0.1:1883",
													"topic": "demoSink"
												}
											}]
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"put": {
				"summary": "Update a rule",
				"deprecated": false,
				"description": "The API accepts a JSON content and update a rule.",
				"tags": ["rules"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "id is the id or name of the old rule.",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"sql": {
										"type": "string"
									},
									"actions": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"log": {
													"type": "object",
													"properties": {}
												}
											}
										}
									}
								},
								"required": ["id", "sql", "actions"]
							},
							"example": {
								"id": "rule1",
								"sql": "SELECT * FROM demo",
								"actions": [{
									"log": {}
								}]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Drop a rule",
				"deprecated": false,
				"description": "The API is used for drop the rule.",
				"tags": ["rules"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/rules/{id}/start": {
			"post": {
				"summary": "Start a rule",
				"deprecated": false,
				"description": "The API is used to start running the rule.",
				"tags": ["rules"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/rules/{id}/stop": {
			"post": {
				"summary": "Stop a rule",
				"deprecated": false,
				"description": "The API is used to start running the rule.",
				"tags": ["rules"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/rules/{id}/restart": {
			"post": {
				"summary": "Restart a rule",
				"deprecated": false,
				"description": "The API is used to start running the rule.",
				"tags": ["rules"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/rules/{id}/status": {
			"get": {
				"summary": "Get the status of a rule",
				"deprecated": false,
				"description": "The command is used to get the status of the rule. If the rule is running, the metrics will be retrieved realtime. The status can be\n- $metrics\n- stopped: $reason",
				"tags": ["rules"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"source_demo_0_records_in_total": {
											"type": "integer"
										},
										"source_demo_0_records_out_total": {
											"type": "integer"
										},
										"source_demo_0_exceptions_total": {
											"type": "integer"
										},
										"source_demo_0_process_latency_ms": {
											"type": "integer"
										},
										"source_demo_0_buffer_length": {
											"type": "integer"
										},
										"source_demo_0_last_invocation": {
											"type": "string"
										},
										"op_filter_0_records_in_total": {
											"type": "integer"
										},
										"op_filter_0_records_out_total": {
											"type": "integer"
										},
										"op_filter_0_exceptions_total": {
											"type": "integer"
										},
										"op_filter_0_process_latency_ms": {
											"type": "integer"
										},
										"op_filter_0_buffer_length": {
											"type": "integer"
										},
										"op_filter_0_last_invocation": {
											"type": "string"
										}
									},
									"required": ["source_demo_0_records_in_total", "source_demo_0_records_out_total", "source_demo_0_exceptions_total", "source_demo_0_process_latency_ms", "source_demo_0_buffer_length", "source_demo_0_last_invocation", "op_filter_0_records_in_total", "op_filter_0_records_out_total", "op_filter_0_exceptions_total", "op_filter_0_process_latency_ms", "op_filter_0_buffer_length", "op_filter_0_last_invocation"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": "{\n    \"source_demo_0_records_in_total\": 5,\n    \"source_demo_0_records_out_total\": 5,\n    \"source_demo_0_exceptions_total\": 0,\n    \"source_demo_0_process_latency_ms\": 0,\n    \"source_demo_0_buffer_length\": 0,\n    \"source_demo_0_last_invocation\": \"2020-01-02T11:28:33.054821\",\n    \"op_filter_0_records_in_total\": 5,\n    \"op_filter_0_records_out_total\": 2,\n    \"op_filter_0_exceptions_total\": 0,\n    \"op_filter_0_process_latency_ms\": 0,\n    \"op_filter_0_buffer_length\": 0,\n    \"op_filter_0_last_invocation\": \"2020-01-02T11:28:33.054821\",\n}"
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/rules/{id}/topo": {
			"get": {
				"summary": "Get the topology structure of a rule",
				"deprecated": false,
				"description": "The command is used to get the status of the rule represented as a json string. In the json string, there are 2 fields:\n\n- sources: it is a string array of the names of all source nodes. They are the entry of the topology.\n- edges: it is a hash map of all edges categorized by nodes. The keys are the starting point of an edge. And the value is a collection of ending point.",
				"tags": ["rules"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"sources": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"edges": {
											"type": "object",
											"properties": {
												"op_project": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"source_stream": {
													"type": "array",
													"items": {
														"type": "string"
													}
												}
											},
											"required": ["op_project", "source_stream"]
										}
									},
									"required": ["sources", "edges"]
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/rules/validate": {
			"post": {
				"summary": "Validate a rule",
				"deprecated": false,
				"description": "The API accepts a JSON content and validate a rule.\nFor the API, here is the explanation of the status codes:\n\n- If the request body is incorrect, a status code of 400 will be returned, indicating an invalid request.\n- If the rule validation fails, a status code of 422 will be returned, indicating an invalid rule.\n- If the rule validation passes, a status code of 200 will be returned, indicating a valid and successfully validated rule.",
				"tags": ["rules"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"sql": {
										"type": "string"
									},
									"actions": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"log": {
													"type": "object",
													"properties": {}
												}
											}
										}
									}
								},
								"required": ["id", "sql", "actions"]
							},
							"example": {
								"id": "rule1",
								"sql": "SELECT * FROM demo",
								"actions": [{
									"log": {}
								}]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/rules/{id}/explain": {
			"get": {
				"summary": "Query Rule Plan",
				"deprecated": false,
				"description": "The API is used to get the plan of the SQL.",
				"tags": ["rules"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "rule id",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"type": {
											"type": "string"
										},
										"info": {
											"type": "string"
										},
										"id": {
											"type": "integer"
										},
										"children": {
											"type": "array",
											"items": {
												"type": "integer"
											}
										}
									},
									"required": ["type", "info", "id", "children"]
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"type": "ProjectPlan",
											"info": "Fields:[ * ]",
											"id": 0,
											"children": [1]
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/ruleset/import": {
			"post": {
				"summary": "Import Ruleset",
				"deprecated": false,
				"description": "The API accepts rulesets and imports them into the system. If a stream or rule in the ruleset already exists, it is not created. The API returns text informing the number of streams and rules created. The API supports specifying rulesets by means of text content or file URIs.\n\n## Ruleset Format\n\nThe file format for importing and exporting ruleset is JSON, which can contain three parts: `streams`, `tables` and `rules`. Each type holds the the key-value pair of the name and the creation statement. In the following example file, we define a stream and two rules.\n\n```shell {\n  \"streams\": {\n    \"demo\": \"CREATE STREAM demo () WITH (DATASOURCE=\\\"users\\\", FORMAT=\\\"JSON\\\")\"\n  },\n  \"tables\": {},\n  \"rules\": {\n    \"rule1\": \"{\\\"id\\\": \\\"rule1\\\",\\\"sql\\\": \\\"SELECT * FROM demo\\\",\\\"actions\\\": [{\\\"log\\\": {}}]}\",\n    \"rule2\": \"{\\\"id\\\": \\\"rule2\\\",\\\"sql\\\": \\\"SELECT * FROM demo\\\",\\\"actions\\\": [{  \\\"log\\\": {}}]}\"\n  }\n}\n```",
				"tags": ["ruleset"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"file": {
										"type": "string",
										"title": " Import by file URI"
									},
									"content": {
										"type": "string",
										"title": " Import by text content"
									}
								}
							},
							"example": {
								"file": "file:///tmp/a.json"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/ruleset/export": {
			"post": {
				"summary": "Export Ruleset",
				"deprecated": false,
				"description": "The export API returns a file to download.",
				"tags": ["ruleset"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/schemas/protobuf": {
			"post": {
				"summary": "Create a schema",
				"deprecated": false,
				"description": "The API accepts a JSON content and create a schema. Each schema type has a standalone endpoint. Currently, only one schema type `protobuf` is supported. Schema is identified by its name, so the name must be unique for each type.\n\nParameters\n1. name：the unique name of the schema.\n2. schema content, use `file` or `content` parameter to specify. After schema created, the schema content will be written into file `data/schemas/$shcema_type/$schema_name`.\n   - file: the url of the schema file. The url can be `http` or `https` scheme or `file` scheme to refer to a local file path of the eKuiper server. The schema file must be the file type of the corresponding schema type. For example, protobuf schema file's extension name must be .proto.\n   - content: the text content of the schema.\n3. soFile：The so file of the static plugin. Detail about the plugin creation, please check customize format.",
				"tags": ["schemas"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"content": {
										"type": "string",
										"title": "Schema content inside content."
									},
									"file": {
										"type": "string",
										"title": "Schema content in a file"
									},
									"soFile": {
										"type": "string",
										"title": "Schema with static plugin"
									}
								},
								"required": ["name"]
							},
							"example": ""
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Show schemas",
				"deprecated": false,
				"description": "The API is used for displaying all schemas defined in the server.",
				"tags": ["schemas"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": ["schema1", "schema2"]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/schemas/protobuf/{name}": {
			"get": {
				"summary": "Describe a schema",
				"deprecated": false,
				"description": "The API is used for print the detailed definition of a schema.",
				"tags": ["schemas"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "name of the schema.",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"type": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"content": {
											"type": "string"
										},
										"file": {
											"type": "string"
										}
									},
									"required": ["type", "name", "content", "file"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"type": "protobuf",
											"name": "schema1",
											"content": "message Book {required string title = 1; required int32 price = 2;}",
											"file": "ekuiper\\etc\\schemas\\protobuf\\schema1.proto"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Delete a schema",
				"deprecated": false,
				"description": "The API is used for dropping the schema.",
				"tags": ["schemas"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"put": {
				"summary": "Update a schema",
				"deprecated": false,
				"description": "The API is used for updating the schema. The request body is the same as creating a schema.",
				"tags": ["schemas"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"file": {
										"type": "string"
									}
								},
								"required": ["name", "file"]
							},
							"example": ""
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/services": {
			"post": {
				"summary": "Register external services",
				"deprecated": false,
				"description": "This API accepts JSON content to create new external services.\n### parameter\n\n1. name: The unique name of the external service, which must be exactly the same as the json file of service definition in the zip file.\n2. file: URL of external service file. URL supports http, https and file modes. When using the file mode, the file must be on the machine where the eKuiper server is located. It must be a zip file, which contains the service description json file with the same name as the service and any other auxiliary files. The schema file must be in the schema folder.\n\n### Service file format\n\nA sample zip file of the source named sample.zip\n\n1. sample.json\n2. Schema directory: it contains one or more schema files used by the service. For example, sample.proto.\n\nAn example of a request for a file on an HTTP server:\n\n```json\n{\n  \"name\":\"random\",\n  \"file\":\"http://127.0.0.1/services/sample.zip\"\n}\n```\n\nAn example of a request for a file on the eKuiper server:\n\n```json\n{\n  \"name\":\"random\",\n  \"file\":\"file:///var/services/sample.zip\"\n}\n```\n\n### ",
				"tags": ["services"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"file": {
										"type": "string",
										"description": " a file on an HTTP server or a file on the eKuiper server."
									}
								},
								"required": ["name", "file"]
							},
							"example": {
								"name": "random",
								"file": "http://127.0.0.1/services/sample.zip"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Display external services",
				"deprecated": false,
				"description": "This API is used to display all external services defined in the server.",
				"tags": ["services"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": ["sample", "sample2"]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/services/{name}": {
			"get": {
				"summary": "Describe external services",
				"deprecated": false,
				"description": "This API is used to print detailed definitions of external services.",
				"tags": ["services"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "the name of the external service.",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Delete external services",
				"deprecated": false,
				"description": "This API is used to delete external services, and all functions defined under the service will be deleted.",
				"tags": ["services"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"put": {
				"summary": "Update external services",
				"deprecated": false,
				"description": "This API is used to update external services, and its parameters are the same as that of service registration.",
				"tags": ["services"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"file": {
										"type": "string"
									}
								},
								"required": ["name", "file"]
							},
							"example": ""
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/services/functions": {
			"get": {
				"summary": "Display all external functions",
				"deprecated": false,
				"description": "Each service can contain multiple functions. This API is used to display the names of all external functions that can be used in SQL.",
				"tags": ["services"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": ["func1", "func2"]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/services/functions/{name}": {
			"get": {
				"summary": "Describe external functions",
				"deprecated": false,
				"description": "This API is used to display the name of the service that defines this external function.",
				"tags": ["services"],
				"parameters": [{
					"name": "name",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"serviceName": {
											"type": "string"
										}
									},
									"required": ["name", "serviceName"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"name": "funcName",
											"serviceName": "serviceName"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/streams": {
			"post": {
				"summary": "Create a stream",
				"deprecated": false,
				"description": "The API is used for creating a stream.\nThis API can run any stream sql statements, not only stream creation.",
				"tags": ["streams"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"sql": {
										"type": "string"
									}
								},
								"required": ["sql"]
							},
							"example": {
								"sql": "create stream my_stream (id bigint, name string, score float) WITH ( datasource = \"topic/temperature\", FORMAT = \"json\", KEY = \"id\")"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Show streams",
				"deprecated": false,
				"description": "The API is used for displaying all of streams defined in the server.",
				"tags": ["streams"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"examples": {
									"1": {
										"summary": "异常示例",
										"value": ["mystream"]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/streams/{id}}": {
			"get": {
				"summary": "Describe a stream",
				"deprecated": false,
				"description": "The API is used for print the detailed definition of stream.",
				"tags": ["streams"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"Name": {
											"type": "string"
										},
										"StreamFields": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"Name": {
														"type": "string"
													},
													"FieldType": {
														"type": "object",
														"properties": {
															"Type": {
																"type": "integer"
															}
														},
														"required": ["Type"]
													}
												},
												"required": ["Name", "FieldType"]
											}
										},
										"Options": {
											"type": "object",
											"properties": {
												"DATASOURCE": {
													"type": "string"
												},
												"FORMAT": {
													"type": "string"
												}
											},
											"required": ["DATASOURCE", "FORMAT"]
										}
									},
									"required": ["Name", "StreamFields", "Options"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"Name": "demo",
											"StreamFields": [{
												"Name": "temperature",
												"FieldType": {
													"Type": 2
												}
											}, {
												"Name": "ts",
												"FieldType": {
													"Type": 1
												}
											}],
											"Options": {
												"DATASOURCE": "demo",
												"FORMAT": "JSON"
											}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/streams/{id}/schema": {
			"get": {
				"summary": "Get stream schema",
				"deprecated": false,
				"description": "The API is used to get the stream schema. The schema is inferred from the physical and logical schema definitions.",
				"tags": ["streams"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "object",
											"properties": {
												"type": {
													"type": "string"
												}
											},
											"required": ["type"]
										},
										"name": {
											"type": "object",
											"properties": {
												"type": {
													"type": "string"
												}
											},
											"required": ["type"]
										},
										"age": {
											"type": "object",
											"properties": {
												"type": {
													"type": "string"
												}
											},
											"required": ["type"]
										},
										"hobbies": {
											"type": "object",
											"properties": {
												"type": {
													"type": "string"
												},
												"properties": {
													"type": "object",
													"properties": {
														"indoor": {
															"type": "object",
															"properties": {
																"type": {
																	"type": "string"
																},
																"items": {
																	"type": "object",
																	"properties": {
																		"type": {
																			"type": "string"
																		}
																	},
																	"required": ["type"]
																}
															},
															"required": ["type", "items"]
														},
														"outdoor": {
															"type": "object",
															"properties": {
																"type": {
																	"type": "string"
																},
																"items": {
																	"type": "object",
																	"properties": {
																		"type": {
																			"type": "string"
																		}
																	},
																	"required": ["type"]
																}
															},
															"required": ["type", "items"]
														}
													},
													"required": ["indoor", "outdoor"]
												}
											},
											"required": ["type", "properties"]
										}
									},
									"required": ["id", "name", "age", "hobbies"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"id": {
												"type": "bigint"
											},
											"name": {
												"type": "string"
											},
											"age": {
												"type": "bigint"
											},
											"hobbies": {
												"type": "struct",
												"properties": {
													"indoor": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"outdoor": {
														"type": "array",
														"items": {
															"type": "string"
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/streams/{id}": {
			"get": {
				"summary": "Update a stream",
				"deprecated": false,
				"description": "The API is used for update the stream definition.",
				"tags": ["streams"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "the id or name of the old stream.",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"sql": {
										"type": "string"
									}
								},
								"required": ["sql"]
							},
							"example": {
								"sql": "create stream my_stream (id bigint, name string, score float) WITH ( datasource = \"topic/temperature\", FORMAT = \"json\", KEY = \"id\")"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Drop a stream",
				"deprecated": false,
				"description": "The API is used for drop the stream definition.",
				"tags": ["streams"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/tables": {
			"post": {
				"summary": "Create a table",
				"deprecated": false,
				"description": "The API is used for creating a table.\nThis API can run any table sql statements, not only table creation.",
				"tags": ["tables"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"sql": {
										"type": "string"
									}
								},
								"required": ["sql"]
							},
							"example": {
								"sql": "create table my_table (id bigint, name string, score float) WITH ( datasource = \"lookup.json\", FORMAT = \"json\", KEY = \"id\")"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Show tables",
				"deprecated": false,
				"description": "The API is used for displaying all of tables defined in the server.\nThis API accepts one parameter kind, the value could be `scan` or `lookup` to query each kind of tables. Other values are invalid, it will return all kinds of tables. ",
				"tags": ["tables"],
				"parameters": [{
					"name": "kind",
					"in": "query",
					"description": "query all the lookup tables.",
					"required": false,
					"example": "lookup",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"examples": {
									"1": {
										"summary": "异常示例",
										"value": ["mytable"]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/tables/{id}}": {
			"get": {
				"summary": "Describe a table",
				"deprecated": false,
				"description": "The API is used for print the detailed definition of table.",
				"tags": ["tables"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"Name": {
											"type": "string"
										},
										"StreamFields": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"Name": {
														"type": "string"
													},
													"FieldType": {
														"type": "object",
														"properties": {
															"Type": {
																"type": "integer"
															}
														},
														"required": ["Type"]
													}
												},
												"required": ["Name", "FieldType"]
											}
										},
										"Options": {
											"type": "object",
											"properties": {
												"DATASOURCE": {
													"type": "string"
												},
												"FORMAT": {
													"type": "string"
												}
											},
											"required": ["DATASOURCE", "FORMAT"]
										}
									},
									"required": ["Name", "StreamFields", "Options"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"Name": "demo",
											"StreamFields": [{
												"Name": "temperature",
												"FieldType": {
													"Type": 2
												}
											}, {
												"Name": "ts",
												"FieldType": {
													"Type": 1
												}
											}],
											"Options": {
												"DATASOURCE": "lookup.json",
												"FORMAT": "JSON"
											}
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/tables/{id}/schema": {
			"get": {
				"summary": "Get table schema",
				"deprecated": false,
				"description": "The API is used to get the table schema. The schema is inferred from the physical and logical schema definitions.",
				"tags": ["tables"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/tables/{id}": {
			"put": {
				"summary": "Update a table",
				"deprecated": false,
				"description": "The API is used for update the table definition.",
				"tags": ["tables"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "the id or name of the old table.",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"sql": {
											"type": "string"
										}
									},
									"required": ["sql"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"sql": "create table my_table (id bigint, name string, score float) WITH ( datasource = \"topic/temperature\", FORMAT = \"json\", KEY = \"id\")"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Drop a table",
				"deprecated": false,
				"description": "The API is used for drop the table definition.",
				"tags": ["tables"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/config/uploads": {
			"post": {
				"summary": "Upload a configuration file",
				"deprecated": false,
				"description": "The API supports to upload a local file, provide the text content of file or upload a http file link. The upload request will save the file into your `${dataPath}/uploads`. It will override the existed file of the same name. The response is the absolute path of the uploaded file which you can refer in other configurations.\n\n### Upload by a file\n\nThe API accepts a multipart file upload requests. Below is an example html file to upload file to `http://127.0.0.1:9081/config/uploads`. In the form data, the file input name must be `uploadFile`.\n\n```shell <!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Upload File</title>\n  </head>\n  <body>\n    <form\n      enctype=\"multipart/form-data\"\n      action=\"http://127.0.0.1:9081/config/uploads\"\n      method=\"post\"\n    >\n      <input type=\"file\" name=\"uploadFile\" />\n      <input type=\"submit\" value=\"upload\" />\n    </form>\n  </body>\n</html>\n```\n### Upload by content\n\nProvide the text content and file name to create a configuration file.\n\n\n```json \n{\n  \"name\": \"my.json\",\n  \"content\": \"{\\\"hello\\\":\\\"world\\\"}\"\n}\n```\n\n### Upload by HTTP file link\n```json \n{\n  \"name\": \"my.json\",\n  \"file\": \"http://127.0.0.1:80/my.json\"\n}\n```",
				"tags": ["uploads"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"title": "configuration file name"
									},
									"content": {
										"type": "string",
										"title": " text content"
									},
									"file": {
										"type": "string",
										"title": "HTTP file link",
										"description": "Should put the file in HTTP Server in advance"
									}
								},
								"required": ["name", "file"]
							},
							"example": {
								"name": "my.json",
								"content": "{\"hello\":\"world\"}"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "Show uploaded file list",
				"deprecated": false,
				"description": "The API is used for displaying all files in the `${dataPath}/uploads` path.",
				"tags": ["uploads"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": ["/ekuiper/data/uploads/zk.gif", "/ekuiper/data/uploads/abc.gif"]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/config/uploads/{fileName}": {
			"delete": {
				"summary": "Delete an uploaded file",
				"deprecated": false,
				"description": "The API is used for deleting a file in the `${dataPath}/uploads` path.",
				"tags": ["uploads"],
				"parameters": [{
					"name": "fileName",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/metrics": {
			"get": {
				"summary": "Get Metrics information of the data stream processing",
				"deprecated": false,
				"description": "Query the raw metrics information of the data stream processing, after the normal operation of the rules, you can see the metrics information in the api similar to kuiper_sink_records_in_total .",
				"tags": ["data processing metrics"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": "# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.\n# TYPE go_gc_duration_seconds summary\ngo_gc_duration_seconds{quantile=\"0\"} 0.000185937\ngo_gc_duration_seconds{quantile=\"0.25\"} 0.000342795\ngo_gc_duration_seconds{quantile=\"0.5\"} 0.000369361\ngo_gc_duration_seconds{quantile=\"0.75\"} 0.000391542\ngo_gc_duration_seconds{quantile=\"1\"} 0.000391542\ngo_gc_duration_seconds_sum 0.001289635\ngo_gc_duration_seconds_count 4\n# HELP go_goroutines Number of goroutines that currently exist.\n# TYPE go_goroutines gauge\ngo_goroutines 15\n# HELP go_info Information about the Go environment.\n# TYPE go_info gauge\ngo_info{version=\"go1.20.2\"} 1\n# HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.\n# TYPE go_memstats_alloc_bytes gauge\ngo_memstats_alloc_bytes 6.983208e+06\n# HELP go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed.\n# TYPE go_memstats_alloc_bytes_total counter\ngo_memstats_alloc_bytes_total 1.1783664e+07\n# HELP go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table.\n# TYPE go_memstats_buck_hash_sys_bytes gauge\ngo_memstats_buck_hash_sys_bytes 1.451727e+06\n# HELP go_memstats_frees_total Total number of frees.\n# TYPE go_memstats_frees_total counter\ngo_memstats_frees_total 62815\n# HELP go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata.\n# TYPE go_memstats_gc_sys_bytes gauge\ngo_memstats_gc_sys_bytes 8.595544e+06\n# HELP go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use.\n# TYPE go_memstats_heap_alloc_bytes gauge\ngo_memstats_heap_alloc_bytes 6.983208e+06\n# HELP go_memstats_heap_idle_bytes Number of heap bytes waiting to be used.\n# TYPE go_memstats_heap_idle_bytes gauge\ngo_memstats_heap_idle_bytes 6.209536e+06\n# HELP go_memstats_heap_inuse_bytes Number of heap bytes that are in use.\n# TYPE go_memstats_heap_inuse_bytes gauge\ngo_memstats_heap_inuse_bytes 9.91232e+06\n# HELP go_memstats_heap_objects Number of allocated objects.\n# TYPE go_memstats_heap_objects gauge\ngo_memstats_heap_objects 38478\n# HELP go_memstats_heap_released_bytes Number of heap bytes released to OS.\n# TYPE go_memstats_heap_released_bytes gauge\ngo_memstats_heap_released_bytes 4.58752e+06\n# HELP go_memstats_heap_sys_bytes Number of heap bytes obtained from system.\n# TYPE go_memstats_heap_sys_bytes gauge\ngo_memstats_heap_sys_bytes 1.6121856e+07\n# HELP go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection.\n# TYPE go_memstats_last_gc_time_seconds gauge\ngo_memstats_last_gc_time_seconds 1.7001045398775318e+09\n# HELP go_memstats_lookups_total Total number of pointer lookups.\n# TYPE go_memstats_lookups_total counter\ngo_memstats_lookups_total 0\n# HELP go_memstats_mallocs_total Total number of mallocs.\n# TYPE go_memstats_mallocs_total counter\ngo_memstats_mallocs_total 101293\n# HELP go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures.\n# TYPE go_memstats_mcache_inuse_bytes gauge\ngo_memstats_mcache_inuse_bytes 4800\n# HELP go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system.\n# TYPE go_memstats_mcache_sys_bytes gauge\ngo_memstats_mcache_sys_bytes 15600\n# HELP go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures.\n# TYPE go_memstats_mspan_inuse_bytes gauge\ngo_memstats_mspan_inuse_bytes 177280\n# HELP go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system.\n# TYPE go_memstats_mspan_sys_bytes gauge\ngo_memstats_mspan_sys_bytes 179520\n# HELP go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place.\n# TYPE go_memstats_next_gc_bytes gauge\ngo_memstats_next_gc_bytes 1.4275312e+07\n# HELP go_memstats_other_sys_bytes Number of bytes used for other system allocations.\n# TYPE go_memstats_other_sys_bytes gauge\ngo_memstats_other_sys_bytes 895921\n# HELP go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator.\n# TYPE go_memstats_stack_inuse_bytes gauge\ngo_memstats_stack_inuse_bytes 655360\n# HELP go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator.\n# TYPE go_memstats_stack_sys_bytes gauge\ngo_memstats_stack_sys_bytes 655360\n# HELP go_memstats_sys_bytes Number of bytes obtained from system.\n# TYPE go_memstats_sys_bytes gauge\ngo_memstats_sys_bytes 2.7915528e+07\n# HELP go_threads Number of OS threads created.\n# TYPE go_threads gauge\ngo_threads 9\n# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.\n# TYPE process_cpu_seconds_total counter\nprocess_cpu_seconds_total 0.38\n# HELP process_max_fds Maximum number of open file descriptors.\n# TYPE process_max_fds gauge\nprocess_max_fds 1.048576e+06\n# HELP process_open_fds Number of open file descriptors.\n# TYPE process_open_fds gauge\nprocess_open_fds 14\n# HELP process_resident_memory_bytes Resident memory size in bytes.\n# TYPE process_resident_memory_bytes gauge\nprocess_resident_memory_bytes 7.012352e+07\n# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.\n# TYPE process_start_time_seconds gauge\nprocess_start_time_seconds 1.7001045391e+09\n# HELP process_virtual_memory_bytes Virtual memory size in bytes.\n# TYPE process_virtual_memory_bytes gauge\nprocess_virtual_memory_bytes 1.327280128e+09\n# HELP process_virtual_memory_max_bytes Maximum amount of virtual memory available in bytes.\n# TYPE process_virtual_memory_max_bytes gauge\nprocess_virtual_memory_max_bytes 1.8446744073709552e+19\n# HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served.\n# TYPE promhttp_metric_handler_requests_in_flight gauge\npromhttp_metric_handler_requests_in_flight 1\n# HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code.\n# TYPE promhttp_metric_handler_requests_total counter\npromhttp_metric_handler_requests_total{code=\"200\"} 0\npromhttp_metric_handler_requests_total{code=\"500\"} 0\npromhttp_metric_handler_requests_total{code=\"503\"} 0"
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/ruletest": {
			"post": {
				"summary": "Create a Test Rule",
				"deprecated": false,
				"description": "Create a trial run rule, wait for it to run. This API can check syntax, ensuring the creation of an executable trial run rule.After the rule is created successfully, the websocket endpoint starts. Users can listen to the websocket address http://locahost:10081/test/uuid to get the result output. Among them, the port and id are the above return values.",
				"tags": ["test rule"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": ["string", "null"],
										"description": "The id of the test rule, required, used for subsequent test rule management. Ensure uniqueness, it cannot be repeated with other test rules, otherwise the original test rule will be overwritten. This id has no association with the id of ordinary rules."
									},
									"sql": {
										"type": ["string", "null"],
										"description": "The sql statement of the test rule, required, used to define the syntax of the test rule."
									},
									"mockSource": {
										"type": ["object", "null"],
										"properties": {
											"demo": {
												"type": "object",
												"properties": {
													"data": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"a": {
																	"type": "integer"
																},
																"b": {
																	"type": "integer"
																}
															}
														}
													},
													"interval": {
														"type": "integer"
													},
													"loop": {
														"type": "boolean"
													}
												},
												"required": ["data", "interval", "loop"]
											},
											"demo1": {
												"type": "object",
												"properties": {
													"data": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"n": {
																	"type": "integer"
																}
															},
															"required": ["n"]
														}
													},
													"interval": {
														"type": "integer"
													},
													"loop": {
														"type": "boolean"
													}
												},
												"required": ["data", "interval", "loop"]
											}
										},
										"required": ["demo", "demo1"],
										"description": "The mock rule definition of the data source of the test rule, optional, used to define the input data of the test rule. If not defined, the real data source in SQL will be used."
									},
									"sinkProps": {
										"type": ["object", "null"],
										"properties": {
											"dataTemplate": {
												"type": "string"
											},
											"fields": {
												"type": "array",
												"items": {
													"type": "string"
												}
											}
										},
										"required": ["dataTemplate", "fields"],
										"description": "The definition of the sink parameters of the test rule, optional. Most of the common parameters of the sink can be used, such as dataTemplate and fields. If not defined, the default sink parameters will be used."
									}
								},
								"required": ["id", "sql", "mockSource", "sinkProps"]
							},
							"example": {
								"id": "uuid",
								"sql": "select * from demo",
								"mockSource": {
									"demo": {
										"data": [{
											"a": 2
										}, {
											"b": 3
										}],
										"interval": 100,
										"loop": true
									},
									"demo1": {
										"data": [{
											"n": 2
										}, {
											"n": 3
										}],
										"interval": 200,
										"loop": true
									}
								},
								"sinkProps": {
									"dataTemplate": "xxx",
									"fields": ["abc", "test"]
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string"
										},
										"port": {
											"type": "integer"
										}
									},
									"required": ["id", "port"]
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": {
											"id": "uuid",
											"port": 10081
										}
									}
								}
							}
						},
						"headers": {}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"msg": {
											"type": "string"
										}
									},
									"required": ["msg"]
								},
								"examples": {
									"1": {
										"summary": "Exception",
										"value": {
											"msg": "error message here"
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/ruletest/{id}/start": {
			"post": {
				"summary": "Start the Test Rule",
				"deprecated": false,
				"description": "Start the trial run rule, WebSocket will be able to receive the data output after the rule runs.",
				"tags": ["test rule"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": "Test rule uuid was started"
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/ruletest/{id}": {
			"delete": {
				"summary": "Delete the Test Rule",
				"deprecated": false,
				"description": "Delete the trial run rule, WebSocket will stop the service.",
				"tags": ["test rule"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								},
								"examples": {
									"1": {
										"summary": "Success",
										"value": "Test rule uuid was stopped"
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/udf/javascript": {
			"post": {
				"summary": "Create a UDF",
				"deprecated": false,
				"description": "Besides defining function in plugins, user-defined functions (UDF) are also supported independently. Currently, we only support JavaScript UDF. We can use REST API or CLI to manage JavaScript functions. \n\nUse this endpoint to create a new function.",
				"tags": ["udf"],
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string",
										"description": " A unique name for the function. This name must also be defined as a function in the script field."
									},
									"description": {
										"type": "string",
										"description": "A brief description of the function."
									},
									"script": {
										"type": "string",
										"description": "The function implementation in JavaScript."
									},
									"isAgg": {
										"type": "boolean",
										"description": "A boolean indicating whether the function is an aggregate function."
									}
								},
								"required": ["id", "description", "script", "isAgg"]
							},
							"example": {
								"id": "area",
								"description": "calculate area",
								"script": "function area(x, y) { return x * y; }",
								"isAgg": false
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"get": {
				"summary": "List UDFs",
				"deprecated": false,
				"description": "Use this endpoint to display all JavaScript functions defined in the server.The response will be a list of function names. ",
				"tags": ["udf"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": ["area"]
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/api/ekuiper/udf/javascript/{id}": {
			"get": {
				"summary": "Describe a UDF",
				"deprecated": false,
				"description": "Use this endpoint to get the detailed definition of a function.Replace {id} with the name of the function you want to describe. The response will be a JSON object with the function's details.",
				"tags": ["udf"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string"
										},
										"description": {
											"type": "string"
										},
										"script": {
											"type": "string"
										},
										"isAgg": {
											"type": "boolean"
										}
									},
									"required": ["id", "description", "script", "isAgg"]
								},
								"examples": {
									"1": {
										"summary": "success",
										"value": {
											"id": "area",
											"description": "calculate area",
											"script": "function area(x, y) { return x * y; }",
											"isAgg": false
										}
									}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"delete": {
				"summary": "Delete a UDF",
				"deprecated": false,
				"description": "Use this endpoint to delete a function.Replace {id} with the name of the function you want to delete. Note that you need to manually stop or delete any rules using the UDF before deleting it. A running rule will not be affected by the deletion of a UDF.",
				"tags": ["udf"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			},
			"put": {
				"summary": "Update a UDF",
				"deprecated": false,
				"description": "The JavaScript UDF can be updated and hot reload. Notice that, a running rule must be restarted to load the updated function.Replace {id} with the name of the function you want to update. The request body should be the same as when creating a UDF. If the function of the id does not exist, it will be created. Otherwise, it will be updated.",
				"tags": ["udf"],
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "",
					"required": true,
					"example": "",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {}
								}
							}
						},
						"headers": {}
					}
				},
				"security": []
			}
		}
	},
	"components": {
		"schemas": {
			"neuron-error": {
				"type": "object",
				"properties": {
					"error": {
						"type": "integer"
					}
				},
				"required": ["error"]
			},
			"neuron-0": {
				"type": "object",
				"properties": {
					"error": {
						"type": "integer"
					}
				},
				"required": ["error"]
			},
			"neuron-token": {
				"type": "object",
				"properties": {
					"token": {
						"type": "string"
					}
				},
				"required": ["token"]
			},
			"VersionResp": {
				"type": "object",
				"properties": {
					"version": {
						"type": "string"
					}
				},
				"required": ["version"]
			},
			"DeliverBody": {
				"type": "object",
				"required": ["template"],
				"properties": {
					"template": {
						"type": "string",
						"x-go-name": "Template"
					}
				}
			},
			"SyslogReq": {
				"type": "object",
				"required": ["enabled", "network", "addr", "priority", "tag"],
				"properties": {
					"addr": {
						"description": "address of log remote forwarding.",
						"type": "string",
						"x-go-name": "Addr"
					},
					"enabled": {
						"description": "whether to enable log remote forwarding. true: enable; false: disable",
						"type": "boolean",
						"x-go-name": "Enabled"
					},
					"network": {
						"description": "now only support udp4",
						"type": "string",
						"x-go-name": "Network"
					},
					"priority": {
						"description": "value can be emerg/alert/crit/err/warning/notice/info/debug",
						"type": "string",
						"x-go-name": "Priority"
					},
					"tag": {
						"description": "syslog protocol tag field, used for syslog server to identify which neuronex client send the syslog message",
						"type": "string",
						"x-go-name": "Tag"
					}
				}
			},
			"syslogInfoData": {
				"type": "object",
				"required": ["enabled", "network", "addr", "priority", "tag"],
				"properties": {
					"addr": {
						"description": "address of log remote forwarding.",
						"type": "string",
						"x-go-name": "Addr"
					},
					"enabled": {
						"description": "whether to enable log remote forwarding. true: enable; false: disable",
						"type": "boolean",
						"x-go-name": "Enabled"
					},
					"network": {
						"description": "now only support udp4",
						"type": "string",
						"x-go-name": "Network"
					},
					"priority": {
						"description": "value can be emerg/alert/crit/err/warning/notice/info/debug",
						"type": "string",
						"x-go-name": "Priority"
					},
					"tag": {
						"description": "syslog protocol tag field, used for syslog server to identify which neuronex client send the syslog message",
						"type": "string",
						"x-go-name": "Tag"
					}
				}
			},
			"LivenessReq": {
				"type": "object",
				"properties": {
					"addr": {
						"description": "address of log remote forwarding.",
						"type": "string",
						"x-go-name": "Addr"
					},
					"enabled": {
						"description": "whether to enable log remote forwarding. true: enable; false: disable",
						"type": "boolean",
						"x-go-name": "Enabled"
					},
					"network": {
						"description": "now only support udp4",
						"type": "string",
						"x-go-name": "Network"
					},
					"priority": {
						"description": "value can be emerg/alert/crit/err/warning/notice/info/debug",
						"type": "string",
						"x-go-name": "Priority"
					},
					"tag": {
						"description": "syslog protocol tag field, used for syslog server to identify which neuronex client send the syslog message",
						"type": "string",
						"x-go-name": "Tag"
					}
				}
			},
			"QuerySystemInfoResp": {
				"type": "object",
				"required": ["version", "systemStatus", "neuronRunningTime", "neuronStatus", "neuronMemoryUsed", "neuronMemoryTotal", "ekuiperRunningTime", "ekuiperStatus", "ekuiperMemoryUsed", "ekuiperMemoryTotal", "hwToken", "os", "arch"],
				"properties": {
					"arch": {
						"type": "string",
						"x-go-name": "Arch"
					},
					"ekuiperMemoryTotal": {
						"description": " unit: byte",
						"type": "string",
						"x-go-name": "EkuiperMemoryTotal"
					},
					"ekuiperMemoryUsed": {
						"description": " unit: byte",
						"type": "string",
						"x-go-name": "EkuiperMemoryUsed"
					},
					"ekuiperRunningTime": {
						"description": " unit: second",
						"type": "string",
						"x-go-name": "EkuiperRunningTime"
					},
					"ekuiperStatus": {
						"description": " 0:normal 1:stop",
						"type": "string",
						"x-go-name": "EkuiperStatus"
					},
					"hwToken": {
						"description": "Hardware Identification",
						"type": "string",
						"x-go-name": "HwToken"
					},
					"neuronMemoryTotal": {
						"description": " unit: byte",
						"type": "string",
						"x-go-name": "NeuronMemoryTotal"
					},
					"neuronMemoryUsed": {
						"description": " unit: byte",
						"type": "string",
						"x-go-name": "NeuronMemoryUsed"
					},
					"neuronRunningTime": {
						"description": " unit: second",
						"type": "string",
						"x-go-name": "NeuronRunningTime"
					},
					"neuronStatus": {
						"description": " 0:normal 1:stop",
						"type": "string",
						"x-go-name": "NeuronStatus"
					},
					"os": {
						"type": "string",
						"x-go-name": "Os"
					},
					"systemStatus": {
						"description": " 0:normal 1:stop",
						"type": "string",
						"x-go-name": "SystemStatus"
					},
					"version": {
						"type": "string",
						"x-go-name": "Version"
					}
				}
			},
			"responseData": {
				"type": "object",
				"required": ["token", "role"],
				"properties": {
					"token": {
						"type": "string",
						"x-go-name": "Token"
					},
					"role": {
						"type": "string",
						"x-go-name": "Role"
					}
				}
			},
			"responseLogData": {
				"type": "object",
				"required": ["level"],
				"properties": {
					"level": {
						"type": "string",
						"x-go-name": "level"
					}
				}
			},
			"LoginBody": {
				"type": "object",
				"required": ["name", "password"],
				"properties": {
					"name": {
						"type": "string",
						"x-go-name": "Username"
					},
					"password": {
						"type": "string",
						"x-go-name": "Password"
					}
				}
			},
			"UsedTagCountResponse": {
				"type": "object",
				"required": ["usedTagCount"],
				"properties": {
					"usedTagCount": {
						"type": "integer",
						"format": "uint64",
						"x-go-name": "UsedTagCount"
					}
				}
			},
			"DeliverLicenseReqData": {
				"type": "object",
				"required": ["license"],
				"properties": {
					"license": {
						"description": "\tcontents of the virtual license generated by ECP",
						"type": "string",
						"x-go-name": "License"
					}
				}
			},
			"StatusError": {
				"type": "object",
				"required": ["code", "message"],
				"properties": {
					"code": {
						"description": "错误代码",
						"type": "integer",
						"format": "int64",
						"x-go-name": "Code"
					},
					"message": {
						"description": "错误信息",
						"type": "string",
						"x-go-name": "Msg"
					}
				}
			},
			"SendActivationCodeReqData": {
				"type": "object",
				"required": ["activationCode"],
				"properties": {
					"activationCode": {
						"type": "string",
						"x-go-name": "ActivationCode"
					}
				}
			},
			"UploadLicenseResponse": {
				"type": "object",
				"required": ["type", "customerName", "customerContact", "startDate", "expiredDate", "expired", "totalTagCount", "usedTagCount", "enabledPlugins", "hardwareToken", "ekuiperOn", "officialEmail"],
				"properties": {
					"customerContact": {
						"type": "string",
						"x-go-name": "CustomerContact"
					},
					"customerName": {
						"type": "string",
						"x-go-name": "CustomerName"
					},
					"ekuiperOn": {
						"description": "\tWhether to enable data stream processing",
						"type": "boolean",
						"x-go-name": "EkuiperOn"
					},
					"enabledPlugins": {
						"description": "Plugins supported by current license",
						"type": "array",
						"items": {
							"type": "string"
						},
						"x-go-name": "EnabledPlugins"
					},
					"expired": {
						"description": "\tWhether the license is expired or not",
						"type": "boolean",
						"x-go-name": "Expired"
					},
					"expiredDate": {
						"description": "License expiration time (utc time)",
						"type": "string",
						"x-go-name": "ExpiredDate"
					},
					"hardwareToken": {
						"description": "\tHardware identification",
						"type": "string",
						"x-go-name": "HardwareToken"
					},
					"officialEmail": {
						"description": "Issuing Email",
						"type": "string",
						"x-go-name": "OfficialEmail"
					},
					"startDate": {
						"description": "License effective time (utc time)",
						"type": "string",
						"x-go-name": "StartDate"
					},
					"totalTagCount": {
						"description": "\tMaximum number of tag supported by license",
						"type": "integer",
						"format": "uint64",
						"x-go-name": "TotalTagCount"
					},
					"type": {
						"description": "The value can be TRIAL, OFFCIAL, VIRTUAL.",
						"type": "string",
						"x-go-name": "LicenseType"
					},
					"usedTagCount": {
						"description": "Number of tags currently in use",
						"type": "integer",
						"format": "uint64",
						"x-go-name": "UsedTagCount"
					}
				}
			},
			"UploadLicenseReqData": {
				"type": "object",
				"required": ["license"],
				"properties": {
					"license": {
						"description": "\tContents of the license file to be uploaded",
						"type": "string",
						"x-go-name": "License"
					}
				}
			},
			"GetLicenseResponse": {
				"type": "object",
				"required": ["licenseType", "customerName", "customerContact", "startDate", "expiredDate", "expired", "totalTagCount", "usedTagCount", "enabledPlugins", "hardwareToken", "ekuiperOn", "officialEmail"],
				"properties": {
					"customerContact": {
						"type": "string",
						"x-go-name": "CustomerContact"
					},
					"customerName": {
						"type": "string",
						"x-go-name": "CustomerName"
					},
					"ekuiperOn": {
						"description": "\tWhether to enable data stream processing",
						"type": "boolean",
						"x-go-name": "EkuiperOn"
					},
					"enabledPlugins": {
						"description": "Plugins supported by current license",
						"type": "array",
						"items": {
							"type": "string"
						},
						"x-go-name": "EnabledPlugins"
					},
					"expired": {
						"description": "\tWhether the license is expired or not",
						"type": "boolean",
						"x-go-name": "Expired"
					},
					"expiredDate": {
						"description": "License expiration time (utc time)",
						"type": "string",
						"x-go-name": "ExpiredDate"
					},
					"hardwareToken": {
						"description": "\tHardware identification",
						"type": "string",
						"x-go-name": "HardwareToken"
					},
					"licenseType": {
						"description": "The value can be TRIAL, OFFCIAL, VIRTUAL.",
						"type": "string",
						"x-go-name": "LicenseType"
					},
					"officialEmail": {
						"description": "Issuing Email",
						"type": "string",
						"x-go-name": "OfficialEmail"
					},
					"startDate": {
						"description": "License effective time (utc time)",
						"type": "string",
						"x-go-name": "StartDate"
					},
					"totalTagCount": {
						"description": "\tMaximum number of tag supported by license",
						"type": "integer",
						"format": "uint64",
						"x-go-name": "TotalTagCount"
					},
					"usedTagCount": {
						"description": "Number of tags currently in use",
						"type": "integer",
						"format": "uint64",
						"x-go-name": "UsedTagCount"
					}
				}
			},
			"LoglevelRsqData": {
				"type": "object",
				"required": ["level"],
				"properties": {
					"level": {
						"description": "log level ,could be debug、info、notice、warn、error、fatal",
						"type": "string",
						"x-go-name": "LoglevelStr"
					}
				}
			},
			"LoglevelSettingReqData": {
				"type": "object",
				"required": ["level"],
				"properties": {
					"level": {
						"description": "log level ,could be debug、info、notice、warn、error、fatal",
						"type": "string",
						"x-go-name": "LoglevelStr"
					}
				}
			},
			"LivenessBody": {
				"type": "object",
				"required": ["endpointUrl", "serviceId", "interval"],
				"properties": {
					"endpointUrl": {
						"type": "string",
						"x-go-name": "EndpointUrl"
					},
					"interval": {
						"type": "integer",
						"format": "int64",
						"x-go-name": "Interval"
					},
					"serviceId": {
						"type": "string",
						"x-go-name": "ServiceID"
					}
				}
			},
			"AlertConfig": {
				"type": "object",
				"required": ["enabled", "webhookUrl", "interval", "fireChecks", "resolveChecks", "alertsConfig"],
				"properties": {
					"alertsConfig": {
						"description": " optional, the setting of the rule alerts to be pushed,if it is empty, it means that requires all alert types.",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AlertRuleConfig"
						},
						"x-go-name": "AlertsConfig"
					},
					"enabled": {
						"description": " false: disabled, true: enabled ,If the value is false, the other fields are non-required",
						"type": "boolean",
						"x-go-name": "Enable"
					},
					"fireChecks": {
						"description": " required if alertsConfig is empty, the default fireChecks for all rules in alertsConfig",
						"type": "integer",
						"format": "int64",
						"x-go-name": "FireChecks"
					},
					"interval": {
						"description": "\trequired if enabled is true",
						"type": "integer",
						"format": "int64",
						"x-go-name": "Interval"
					},
					"resolveChecks": {
						"description": " required if alertsConfig is empty, the default resolveChecks for all rules in alertsConfig",
						"type": "integer",
						"format": "int64",
						"x-go-name": "ResolveChecks"
					},
					"webhookUrl": {
						"description": "\toptional,the webhook that alert events are pushed to",
						"type": "string",
						"x-go-name": "WebhookUrl"
					}
				}
			},
			"AlertRuleConfig": {
				"type": "object",
				"required": ["ruleId", "fireChecks", "resolveChecks", "ruleName"],
				"properties": {
					"fireChecks": {
						"description": "how many consecutive monitoring times will trigger an alarm,means that N.",
						"type": "integer",
						"format": "int64",
						"x-go-name": "FireChecks"
					},
					"resolveChecks": {
						"description": "how many times to monitor continuously, the alarm will be resumed,means that P.",
						"type": "integer",
						"format": "int64",
						"x-go-name": "ResolveChecks"
					},
					"ruleId": {
						"type": "string",
						"x-go-name": "RuleId"
					},
					"ruleName": {
						"type": "string",
						"x-go-name": "RuleName"
					}
				}
			},
			"MetricConfig": {
				"type": "object",
				"required": ["enabled", "prometheusUrl", "prometheusUsername", "prometheusPassword", "interval", "metricIds", "labels"],
				"properties": {
					"enabled": {
						"description": "required,false: disabled, true: enabled ,If the value is false, the other fields are non-required",
						"type": "boolean",
						"x-go-name": "Enable"
					},
					"interval": {
						"description": " optional, the interval of generating metrics data,unit is second",
						"type": "integer",
						"format": "int64",
						"x-go-name": "Interval"
					},
					"labels": {
						"description": "optional, additional labels needed for metric, will be pushed to pushgateway along with the metrics data for grouping of metrics,key: label name,value: label value",
						"type": "object",
						"additionalProperties": {
							"type": "string"
						},
						"x-go-name": "Labels",
						"properties": {}
					},
					"metricIds": {
						"description": "optional, metric id array,a value of null means push all metric data.",
						"type": "array",
						"items": {
							"type": "string"
						},
						"x-go-name": "MetricIds"
					},
					"prometheusPassword": {
						"description": " optional, the url of password for pushgateway",
						"type": "string",
						"x-go-name": "PrometheusPassword"
					},
					"prometheusUrl": {
						"description": " optional, the url of pushgateway,like http://localhost:9091",
						"type": "string",
						"x-go-name": "PrometheusUrl"
					},
					"prometheusUsername": {
						"description": " optional, the url of username for pushgateway",
						"type": "string",
						"x-go-name": "PrometheusUsername"
					}
				}
			},
			"PasswordChangeBody": {
				"type": "object",
				"required": ["name", "old_password", "new_password"],
				"properties": {
					"name": {
						"type": "string",
						"x-go-name": "Username"
					},
					"new_password": {
						"type": "string",
						"x-go-name": "NewPassword"
					},
					"old_password": {
						"type": "string",
						"x-go-name": "OldPassword"
					}
				}
			},
			"NewUserRequestBody": {
				"type": "object",
				"required": ["name", "password", "role"],
				"properties": {
					"name": {
						"type": "string",
						"x-go-name": "Username"
					},
					"password": {
						"type": "string",
						"x-go-name": "Password"
					},
					"description": {
						"type": "string",
						"x-go-name": "UserDescription"
					},
					"role": {
						"type": "string",
						"x-go-name": "Role"
					}
				}
			},
			"UserRoleChangeBody": {
				"type": "object",
				"required": ["name", "role"],
				"properties": {
					"name": {
						"type": "string",
						"x-go-name": "Username"
					},
					"description": {
						"type": "string",
						"x-go-name": "UserDescription"
					},
					"role": {
						"type": "string",
						"x-go-name": "Role"
					}
				}
			},
			"SSOConfigBody": {
				"type": "object",
				"required": ["name", "url", "clientId", "clientSecret", "type"],
				"properties": {
					"name": {
						"type": "string",
						"x-go-name": "Name"
					},
					"url": {
						"type": "string",
						"x-go-name": "URL"
					},
					"clientId": {
						"type": "string",
						"x-go-name": "ClientID"
					},
					"clientSecret": {
						"type": "string",
						"x-go-name": "ClientSecret"
					},
					"type": {
						"type": "string",
						"x-go-name": "Type"
					},
					"enabled": {
						"type": "boolean",
						"default": false,
						"x-go-name": "Enabled"
					}
				}
			},
			"UpdateSSOConfigBody": {
				"type": "object",
				"required": ["url", "clientId", "clientSecret", "type", "enabled"],
				"properties": {
					"url": {
						"type": "string",
						"x-go-name": "URL"
					},
					"clientId": {
						"type": "string",
						"x-go-name": "ClientID"
					},
					"clientSecret": {
						"type": "string",
						"x-go-name": "ClientSecret"
					},
					"type": {
						"type": "string",
						"x-go-name": "Type"
					},
					"enabled": {
						"type": "boolean",
						"x-go-name": "Enabled"
					}
				}
			}
		},
		"securitySchemes": {}
	},
	"servers": []
}